<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_hardware_uart_d_u_e_8h_source" xml:lang="ru">
<title>hardwareUartDUE.h</title>
<indexterm><primary>src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;Arduino.h&quot;</emphasis>
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_flprog_utilites_8h">flprogUtilites.h</link>&quot;</emphasis>
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00004"/>00004 
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#ifdef&#32;FLPROG_CORE_AVR_DUE</emphasis>
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00006"/>00006 <emphasis role="keyword">class&#32;</emphasis>FLProgUart&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_f_l_prog_uart_basic">FLProgUartBasic</link>
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00007"/>00007 {
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00008"/>00008 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00009"/>00009 &#32;&#32;&#32;&#32;FLProgUart(){};
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00010"/>00010 &#32;&#32;&#32;&#32;FLProgUart(UARTClass&#32;*hardwarePort);
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_uart_basic_1a064ae107b3e87fcbda914dd1ae691d57">begin</link>();
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_uart_basic_1a064ae107b3e87fcbda914dd1ae691d57">begin</link>(int32_t&#32;speed,&#32;UARTClass::UARTModes&#32;mode);
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_f_l_prog_uart_basic_1a76ec6264530f2bd0cf20fd3ccced3370">hasPort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(port&#32;==&#32;0);&#32;};
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_uart_basic_1a9d2aed1e23569871e0fc5c2099db85dc">restartPort</link>();
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00015"/>00015 
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00016"/>00016 <emphasis role="keyword">protected</emphasis>:
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;Stream&#32;*<link linkend="_class_f_l_prog_uart_basic_1a746fd4b3995e52b77d8845be2235bd15">uartPort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;port;&#32;};
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00018"/>00018 &#32;&#32;&#32;&#32;UARTClass&#32;*port;
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00019"/>00019 &#32;&#32;&#32;&#32;UARTClass::UARTModes&#32;serialModeFromParametrs();
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setSerialMode(UARTClass::UARTModes&#32;mode);
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00021"/>00021 };
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00022"/>00022 
<anchor xml:id="_hardware_uart_d_u_e_8h_source_1l00023"/>00023 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
