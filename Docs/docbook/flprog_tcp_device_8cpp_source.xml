<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_flprog_tcp_device_8cpp_source" xml:lang="ru">
<title>flprogTcpDevice.cpp</title>
<indexterm><primary>src/tcp/flprogTcpDevice.cpp</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="_flprog_tcp_device_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_flprog_tcp_device_8h">flprogTcpDevice.h</link>&quot;</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00002"/>00002 <emphasis role="comment">//------------FLProgTcpDevice--------</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00003"/><link linkend="_class_f_l_prog_tcp_device_1a79a6dcab0f5f8b3d176e0a84e7f1eb89">00003</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a79a6dcab0f5f8b3d176e0a84e7f1eb89">FLProgTcpDevice::setPort</link>(<emphasis role="keywordtype">int</emphasis>&#32;port)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00004"/>00004 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1aa645e6062fed7ab7380606c83ac14fcf">tcpPort</link>&#32;==&#32;port)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1aa645e6062fed7ab7380606c83ac14fcf">tcpPort</link>&#32;=&#32;port;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1ab251ab3378529ff4c80bf2d44a0afca2">restart</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00009"/>00009 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00010"/>00010 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00011"/><link linkend="_class_f_l_prog_tcp_device_1a6284fa6d5ebbb5d80dbac1d33c8169ad">00011</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a6284fa6d5ebbb5d80dbac1d33c8169ad">FLProgTcpDevice::beClient</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00012"/>00012 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>&#32;=&#32;<link linkend="_flprog_tcp_device_8h_1a04f51819679f0e7eb603a652f2e8fb45">FLPROG_TSP_CLIENT_MODE</link>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1ab251ab3378529ff4c80bf2d44a0afca2">restart</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00017"/>00017 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00018"/>00018 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00019"/><link linkend="_class_f_l_prog_tcp_device_1a19b4deabd8751ad90ffc8f78074786d7">00019</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a19b4deabd8751ad90ffc8f78074786d7">FLProgTcpDevice::beServer</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00020"/>00020 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>&#32;=&#32;<link linkend="_flprog_tcp_device_8h_1aabcce68db3bc9710dc01623fabc76cea">FLPROG_TCP_SERVER_MODE</link>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1ab251ab3378529ff4c80bf2d44a0afca2">restart</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00025"/>00025 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00026"/>00026 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00027"/><link linkend="_class_f_l_prog_tcp_device_1ab251ab3378529ff4c80bf2d44a0afca2">00027</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1ab251ab3378529ff4c80bf2d44a0afca2">FLProgTcpDevice::restart</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00028"/>00028 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1af26e6967e9cef10b93c5d6e5b60cd2e3">stop</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>&#32;&amp;&amp;&#32;(<link linkend="_class_f_l_prog_tcp_device_1a8beddb2d793cb22786c1ccde51807ffa">hasServer</link>()))
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1aa4d64e12f9dfdb00126a74cd9d9e8e7a">begin</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00034"/>00034 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00035"/>00035 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00036"/><link linkend="_class_f_l_prog_tcp_device_1af26e6967e9cef10b93c5d6e5b60cd2e3">00036</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1af26e6967e9cef10b93c5d6e5b60cd2e3">FLProgTcpDevice::stop</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00037"/>00037 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;stop();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00039"/>00039 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00040"/>00040 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00041"/><link linkend="_class_f_l_prog_tcp_device_1a640fbd479b1cce71b96cbd2d57e29c93">00041</link> <emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a640fbd479b1cce71b96cbd2d57e29c93">FLProgTcpDevice::available</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00042"/>00042 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;<link linkend="_class_f_l_prog_tcp_device_1af85f742fc5af14497d586707a35e8852">connected</link>())
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;available();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00048"/>00048 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00049"/>00049 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00050"/><link linkend="_class_f_l_prog_tcp_device_1af8b5c4ec514ae4187b72f9150cd11dcd">00050</link> <emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1af8b5c4ec514ae4187b72f9150cd11dcd">FLProgTcpDevice::read</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00051"/>00051 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00052"/>00052 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;read();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00054"/>00054 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00055"/>00055 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00056"/><link linkend="_class_f_l_prog_tcp_device_1af85f742fc5af14497d586707a35e8852">00056</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1af85f742fc5af14497d586707a35e8852">FLProgTcpDevice::connected</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00057"/>00057 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;connected();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00059"/>00059 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00060"/>00060 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00061"/><link linkend="_class_f_l_prog_tcp_device_1a1847080cabb96d96ba936478c9d344bf">00061</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a1847080cabb96d96ba936478c9d344bf">FLProgTcpDevice::print</link>(String&#32;data)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00062"/>00062 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;print(data);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00064"/>00064 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00065"/>00065 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00066"/><link linkend="_class_f_l_prog_tcp_device_1a89be399dd246d274c43866c28342e25d">00066</link> <emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a89be399dd246d274c43866c28342e25d">FLProgTcpDevice::write</link>(<emphasis role="keywordtype">byte</emphasis>&#32;buffer[],&#32;<emphasis role="keywordtype">byte</emphasis>&#32;size)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00067"/>00067 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;write(buffer,&#32;size);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00069"/>00069 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00070"/>00070 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00071"/><link linkend="_class_f_l_prog_tcp_device_1aa03e43ea6cc1646f02b0577de0e500dc">00071</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a154982dbaa1113ed868f976a21e463b4">FLProgTcpDevice::connect</link>(uint16_t&#32;ipFirst,&#32;uint16_t&#32;ipSecond,&#32;uint16_t&#32;ipThird,&#32;uint16_t&#32;ipFourth,&#32;<emphasis role="keywordtype">int</emphasis>&#32;newPort)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00072"/>00072 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a86057670ad2c44794686d9d492448c5c">workIp</link>[0]&#32;=&#32;ipFirst;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a86057670ad2c44794686d9d492448c5c">workIp</link>[1]&#32;=&#32;ipSecond;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a86057670ad2c44794686d9d492448c5c">workIp</link>[2]&#32;=&#32;ipThird;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a86057670ad2c44794686d9d492448c5c">workIp</link>[3]&#32;=&#32;ipFourth;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00077"/>00077 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a154982dbaa1113ed868f976a21e463b4">connect</link>(<link linkend="_class_f_l_prog_tcp_device_1a86057670ad2c44794686d9d492448c5c">workIp</link>,&#32;newPort);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00079"/>00079 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00080"/>00080 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00081"/><link linkend="_class_f_l_prog_tcp_device_1ae373c7a0ad06e3952ba73c0258057107">00081</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_tcp_device_1a154982dbaa1113ed868f976a21e463b4">FLProgTcpDevice::connect</link>(IPAddress&#32;newIp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;newPort)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00082"/>00082 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;<link linkend="_class_f_l_prog_tcp_device_1af85f742fc5af14497d586707a35e8852">connected</link>())
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a0c3fcd4630440016a9fd506e38f99673">setAvalibleClientFromServer</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;<link linkend="_class_f_l_prog_tcp_device_1af85f742fc5af14497d586707a35e8852">connected</link>())
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1aac287f2c4f4ebd7d402c686d2759349e">clientRemoteIp</link>()&#32;==&#32;newIp)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a02c88623d43e6d6496f9ac716ba12fb5">clientRemotePort</link>()&#32;==&#32;newPort)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1af26e6967e9cef10b93c5d6e5b60cd2e3">stop</link>();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<link linkend="_class_f_l_prog_tcp_device_1a4433d323e544ae9a190040b3dd69fe79">tcpClient</link>()-&gt;connect(newIp,&#32;newPort);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00104"/>00104 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00105"/>00105 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00106"/>00106 <emphasis role="comment">//----------FLProgW5100TcpDevice--------</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00107"/>00107 <emphasis role="preprocessor">#ifndef&#32;FLPROG_CORE_ESP8266_OR_ESP32</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00108"/><link linkend="_class_f_l_prog_w5100_tcp_device_1af00df1f2de48023e9e66a03d753e08d6">00108</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_w5100_tcp_device_1af00df1f2de48023e9e66a03d753e08d6">FLProgW5100TcpDevice::begin</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00109"/>00109 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_f_l_prog_tcp_device_1a0c233255b7b7d05fc3450ad0cb5c2514">mode</link>)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;server&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;EthernetServer(<link linkend="_class_f_l_prog_tcp_device_1aa645e6062fed7ab7380606c83ac14fcf">tcpPort</link>);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;server-&gt;begin();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00115"/>00115 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00116"/>00116 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00117"/><link linkend="_class_f_l_prog_w5100_tcp_device_1ad097d1f33176353990744dc642346e8a">00117</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_f_l_prog_w5100_tcp_device_1ad097d1f33176353990744dc642346e8a">FLProgW5100TcpDevice::setAvalibleClientFromServer</link>()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00118"/>00118 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(server&#32;==&#32;0)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;client&#32;=&#32;server-&gt;available();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00122"/>00122 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00123"/>00123 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00124"/>00124 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00125"/>00125 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00126"/>00126 <emphasis role="comment">//-------------FLProgWiFiTcpDevice-----------</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00127"/>00127 <emphasis role="preprocessor">#ifdef&#32;FLPROG_CORE_ESP8266_OR_ESP32</emphasis>
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00128"/>00128 <emphasis role="keywordtype">void</emphasis>&#32;FLProgWiFiTcpDevice::begin()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00129"/>00129 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mode)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;{
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;server&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;WiFiServer(tcpPort);
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;server-&gt;begin();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;}
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00135"/>00135 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00136"/>00136 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00137"/>00137 <emphasis role="keywordtype">void</emphasis>&#32;FLProgWiFiTcpDevice::setAvalibleClientFromServer()
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00138"/>00138 {
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(server&#32;==&#32;0)
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;client&#32;=&#32;server-&gt;available();
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00142"/>00142 }
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00143"/>00143 
<anchor xml:id="_flprog_tcp_device_8cpp_source_1l00144"/>00144 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
