{\rtf1\ansi\ansicpg1251\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset204\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment FLProg Utilites  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1 \par
}}FLProg Utilites}
{\comment \'D1\'EE\'E7\'E4\'E0\'ED\'EE \'F1\'E8\'F1\'F2\'E5\'EC\'EE\'E9 doxygen 1.9.6.}
{\creatim \yr2023\mo2\dy23\hr6\min4\sec54}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt FLProg Utilites}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
\'C2\'E5\'F0\'F1\'E8\'FF 1\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt \'D7\'F2 23 \'D4\'E5\'E2 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CE\'E3\'EB\'E0\'E2\'EB\'E5\'ED\'E8\'E5\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED\par \pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CF\'EE\'EB\'ED\'FB\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b flprog} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C8\'E5\'F0\'E0\'F0\'F5\'E8\'F7\'E5\'F1\'EA\'E8\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{\tc \v \'C8\'E5\'F0\'E0\'F0\'F5\'E8\'F7\'E5\'F1\'EA\'E8\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EA\'EB\'E0\'F1\'F1\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'C8\'E5\'F0\'E0\'F0\'F5\'E8\'FF \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'C8\'E5\'F0\'E0\'F0\'F5\'E8\'FF \'EA\'EB\'E0\'F1\'F1\'EE\'E2.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
FLProgI2C\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
FLProgVirtualI2C\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FLProgI2cBasicSensor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
FLProgI2cStepWorkSensor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FLProgTCA9548A\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FLProgTcpDevice\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
FLProgW5100TcpDevice\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FLProgUartBasic\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EA\'EB\'E0\'F1\'F1\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CA\'EB\'E0\'F1\'F1\'FB \'F1 \'E8\'F5 \'EA\'F0\'E0\'F2\'EA\'E8\'EC \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\'EC.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b FLProgI2C} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgI2cBasicSensor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgI2cStepWorkSensor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgTCA9548A} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgTcpDevice} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgUartBasic} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgVirtualI2C} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FLProgW5100TcpDevice} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'D1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2\par \pard\plain 
{\tc \v \'D1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB\'FB\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CF\'EE\'EB\'ED\'FB\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b src/{\b flprogUtilites.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b flprogUtilites.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/i2c/{\b flprogI2C.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/i2c/{\b flprogI2C.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/i2c/{\b flprogI2C_sensorsBasic.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/i2c/{\b flprogI2C_sensorsBasic.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/tcp/{\b flprogTcpDevice.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/tcp/{\b flprogTcpDevice.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/{\b flprogUart.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/{\b flprogUart.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/bluetoothSerial/{\b flprogUartBluetoothSerial.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/bluetoothSerial/{\b flprogUartBluetoothSerial.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartAVR/{\b hardwareUartAVR.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartAVR/{\b hardwareUartAVR.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartDUE/{\b hardwareUartDUE.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartDUE/{\b hardwareUartDUE.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartESP32/{\b hardwareUartESP32.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartESP32/{\b hardwareUartESP32.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartESP8266/{\b hardwareUartESP8266.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartESP8266/{\b hardwareUartESP8266.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartSTM/{\b hardwareUartSTM.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/hardwareUart/hardwareUartSTM/{\b hardwareUartSTM.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/softwareUart/{\b flprogSoftwareUart.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/uart/softwareUart/{\b flprogSoftwareUart.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/arduino/avr/{\b flprogUtilitesAVR.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/arduino/avr/{\b flprogUtilitesAVR.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/arduino/due/{\b flprogUtilitesDUE.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/arduino/due/{\b flprogUtilitesDUE.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/esp32/{\b flprogUtilitesESP32.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/esp32/{\b flprogUtilitesESP32.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/esp8266/{\b flprogUtilitesESP8266.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/variant/esp8266/{\b flprogUtilitesESP8266.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'EE \'E8\'EC\'E5\'ED flprog\par \pard\plain 
{\tc\tcl2 \v flprog}
{\xe \v flprog}
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D4\'F3\'ED\'EA\'F6\'E8\'E8\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isTimer} (uint32_t startTime, uint32_t period)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isTimerMicros} (unsigned long startTime, unsigned long period)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b serialCodeForParametrs} (byte portDataBits, byte portStopBits, byte portParity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speedFromCode} (byte code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b codeFromSpeed} (int32_t speed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b difference32} (uint32_t start, uint32_t end)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b timeBack} (uint32_t value)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D4\'F3\'ED\'EA\'F6\'E8\'E8\par
\pard\plain 
{\xe \v codeFromSpeed\:flprog}
{\xe \v flprog\:codeFromSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t flprog::codeFromSpeed (int32_t  {\i speed})}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 79}}\par
}
{\xe \v difference32\:flprog}
{\xe \v flprog\:difference32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t flprog::difference32 (uint32_t  {\i start}, uint32_t  {\i end})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 123}}\par
}
{\xe \v isTimer\:flprog}
{\xe \v flprog\:isTimer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool flprog::isTimer (uint32_t  {\i startTime}, uint32_t  {\i period})}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 132}}\par
}
{\xe \v isTimerMicros\:flprog}
{\xe \v flprog\:isTimerMicros}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool flprog::isTimerMicros (unsigned long  {\i startTime}, unsigned long  {\i period})}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 137}}\par
}
{\xe \v serialCodeForParametrs\:flprog}
{\xe \v flprog\:serialCodeForParametrs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int flprog::serialCodeForParametrs (byte  {\i portDataBits}, byte  {\i portStopBits}, byte  {\i portParity})}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 3}}\par
}
{\xe \v speedFromCode\:flprog}
{\xe \v flprog\:speedFromCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t flprog::speedFromCode (byte  {\i code})}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 33}}\par
}
{\xe \v timeBack\:flprog}
{\xe \v flprog\:timeBack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t flprog::timeBack (uint32_t  {\i value})}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 142}}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB{\tc \v \'CA\'EB\'E0\'F1\'F1\'FB}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgI2C\par \pard\plain 
{\tc\tcl2 \v FLProgI2C}
{\xe \v FLProgI2C}
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
\par
{
{\f2 #include <flprogI2C.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgI2C:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_i2_c.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgI2C} (byte busNumber=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b begin} (int pinSDA, int pinSCL)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b findAddr} (uint8_t addr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getErrorCode} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWrite} (uint8_t addr, uint8_t data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWrite} (uint8_t addr, const uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRequestFrom} (uint8_t address, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint16_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint32_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullReadReg} (uint8_t addr, uint8_t reg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWriteReg} (uint8_t addr, uint8_t reg, uint8_t value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b beginTransmission} (uint8_t addr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (const uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (uint8_t data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b endTransmission} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b requestFrom} (uint8_t address, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b waitingForData} (uint8_t count)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setSpeed} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b resetSpeedFrom} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b checkBus} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b beginWire0} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b bus}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b busy} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b status} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b codeErr} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sda} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b scl} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speed} = {\b FLPROG_I2CSPEED}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 16}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v FLProgI2C\:FLProgI2C}
{\xe \v FLProgI2C\:FLProgI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
FLProgI2C::FLProgI2C (byte  {\i busNumber} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 7}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v available\:FLProgI2C}
{\xe \v FLProgI2C\:available}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgI2C::available (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 265}}\par
}
{\xe \v begin\:FLProgI2C}
{\xe \v FLProgI2C\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::begin (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 37}}\par
}
{\xe \v begin\:FLProgI2C}
{\xe \v FLProgI2C\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::begin (int  {\i pinSDA}, int  {\i pinSCL})}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 28}}\par
}
{\xe \v beginTransmission\:FLProgI2C}
{\xe \v FLProgI2C\:beginTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2C::beginTransmission (uint8_t  {\i addr}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 206}}\par
}
{\xe \v beginWire0\:FLProgI2C}
{\xe \v FLProgI2C\:beginWire0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::beginWire0 (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 63}}\par
}
{\xe \v checkBus\:FLProgI2C}
{\xe \v FLProgI2C\:checkBus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::checkBus (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEI \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 12}}\par
}
{\xe \v endTransmission\:FLProgI2C}
{\xe \v FLProgI2C\:endTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::endTransmission (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEK \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 244}}\par
}
{\xe \v findAddr\:FLProgI2C}
{\xe \v FLProgI2C\:findAddr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::findAddr (uint8_t  {\i addr})}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 119}}\par
}
{\xe \v fullRead\:FLProgI2C}
{\xe \v FLProgI2C\:fullRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullRead (uint8_t  {\i addr}, uint16_t *  {\i data}, uint8_t  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 178}}\par
}
{\xe \v fullRead\:FLProgI2C}
{\xe \v FLProgI2C\:fullRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullRead (uint8_t  {\i addr}, uint32_t *  {\i data}, uint8_t  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 192}}\par
}
{\xe \v fullRead\:FLProgI2C}
{\xe \v FLProgI2C\:fullRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullRead (uint8_t  {\i addr}, uint8_t *  {\i data}, uint8_t  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 164}}\par
}
{\xe \v fullReadReg\:FLProgI2C}
{\xe \v FLProgI2C\:fullReadReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullReadReg (uint8_t  {\i addr}, uint8_t  {\i reg})}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 399}}\par
}
{\xe \v fullRequestFrom\:FLProgI2C}
{\xe \v FLProgI2C\:fullRequestFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullRequestFrom (uint8_t  {\i address}, uint8_t  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 153}}\par
}
{\xe \v fullWrite\:FLProgI2C}
{\xe \v FLProgI2C\:fullWrite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullWrite (uint8_t  {\i addr}, const uint8_t *  {\i data}, uint8_t  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 145}}\par
}
{\xe \v fullWrite\:FLProgI2C}
{\xe \v FLProgI2C\:fullWrite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullWrite (uint8_t  {\i addr}, uint8_t  {\i data})}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 137}}\par
}
{\xe \v fullWriteReg\:FLProgI2C}
{\xe \v FLProgI2C\:fullWriteReg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::fullWriteReg (uint8_t  {\i addr}, uint8_t  {\i reg}, uint8_t  {\i value})}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 415}}\par
}
{\xe \v getErrorCode\:FLProgI2C}
{\xe \v FLProgI2C\:getErrorCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::getErrorCode (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 23}}\par
}
{\xe \v read\:FLProgI2C}
{\xe \v FLProgI2C\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgI2C::read (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 280}}\par
}
{\xe \v requestFrom\:FLProgI2C}
{\xe \v FLProgI2C\:requestFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::requestFrom (uint8_t  {\i address}, uint8_t  {\i quantity}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 295}}\par
}
{\xe \v resetSpeedFrom\:FLProgI2C}
{\xe \v FLProgI2C\:resetSpeedFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2C::resetSpeedFrom (uint32_t  {\i newSpeed}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 375}}\par
}
{\xe \v setSpeed\:FLProgI2C}
{\xe \v FLProgI2C\:setSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2C::setSpeed (uint32_t  {\i newSpeed}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFC \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 352}}\par
}
{\xe \v waitingForData\:FLProgI2C}
{\xe \v FLProgI2C\:waitingForData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::waitingForData (uint8_t  {\i count}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 335}}\par
}
{\xe \v write\:FLProgI2C}
{\xe \v FLProgI2C\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2C::write (const uint8_t *  {\i data}, uint8_t  {\i quantity}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 225}}\par
}
{\xe \v write\:FLProgI2C}
{\xe \v FLProgI2C\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2C::write (uint8_t  {\i data}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgVirtualI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 316}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v bus\:FLProgI2C}
{\xe \v FLProgI2C\:bus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::bus{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 46}}\par
}
{\xe \v busy\:FLProgI2C}
{\xe \v FLProgI2C\:busy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2C::busy = false{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 47}}\par
}
{\xe \v codeErr\:FLProgI2C}
{\xe \v FLProgI2C\:codeErr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::codeErr = 0{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 49}}\par
}
{\xe \v scl\:FLProgI2C}
{\xe \v FLProgI2C\:scl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgI2C::scl = -1{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 51}}\par
}
{\xe \v sda\:FLProgI2C}
{\xe \v FLProgI2C\:sda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgI2C::sda = -1{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 50}}\par
}
{\xe \v speed\:FLProgI2C}
{\xe \v FLProgI2C\:speed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2C::speed = {\b FLPROG_I2CSPEED}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 52}}\par
}
{\xe \v status\:FLProgI2C}
{\xe \v FLProgI2C\:status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2C::status = 0{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 48}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgI2cBasicSensor\par \pard\plain 
{\tc\tcl2 \v FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor}
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\par
{
{\f2 #include <flprogI2C_sensorsBasic.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgI2cBasicSensor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_i2c_basic_sensor.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getError} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgI2C} * {\b i2cDevice}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b addres}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speed} = {\b FLPROG_I2CSPEED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b codeError} = {\b FLPROG_SENSOR_NOT_ERROR}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 5}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v getError\:FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor\:getError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2cBasicSensor::getError (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 8}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v addres\:FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor\:addres}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2cBasicSensor::addres{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 12}}\par
}
{\xe \v codeError\:FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor\:codeError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2cBasicSensor::codeError = {\b FLPROG_SENSOR_NOT_ERROR}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 14}}\par
}
{\xe \v i2cDevice\:FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor\:i2cDevice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b FLProgI2C}* FLProgI2cBasicSensor::i2cDevice{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 11}}\par
}
{\xe \v speed\:FLProgI2cBasicSensor}
{\xe \v FLProgI2cBasicSensor\:speed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2cBasicSensor::speed = {\b FLPROG_I2CSPEED}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 13}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'E0 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C_sensorsBasic.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgI2cStepWorkSensor\par \pard\plain 
{\tc\tcl2 \v FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor}
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
\par
{
{\f2 #include <flprogI2C_sensorsBasic.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgI2cStepWorkSensor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_i2c_step_work_sensor.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setReadPeriod} (uint32_t period)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgI2cBasicSensor}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getError} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b readSensor} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b checkDelay} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b checkReadPeriod} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b gotoStepWithDelay} (uint8_t newStep, uint32_t delay)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b checkNeededRead} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b startDelay}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sizeDelay}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b stepAfterDelay}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isNeededRead} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b readPeriod} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b startReadPeriod} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b step} = {\b FLPROG_SENSOR_WAITING_READ_STEP}\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5 \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgI2cBasicSensor}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgI2C} * {\b i2cDevice}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b addres}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speed} = {\b FLPROG_I2CSPEED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b codeError} = {\b FLPROG_SENSOR_NOT_ERROR}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 17}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v checkDelay\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:checkDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::checkDelay (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 3}}\par
}
{\xe \v checkNeededRead\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:checkNeededRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::checkNeededRead (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 45}}\par
}
{\xe \v checkReadPeriod\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:checkReadPeriod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::checkReadPeriod (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 25}}\par
}
{\xe \v gotoStepWithDelay\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:gotoStepWithDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::gotoStepWithDelay (uint8_t  {\i newStep}, uint32_t  {\i delay}){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 37}}\par
}
{\xe \v read\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::read ()}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 15}}\par
}
{\xe \v readSensor\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:readSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FLProgI2cStepWorkSensor::readSensor (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 24}}\par
}
{\xe \v setReadPeriod\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:setReadPeriod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgI2cStepWorkSensor::setReadPeriod (uint32_t  {\i period})}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 20}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v isNeededRead\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:isNeededRead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgI2cStepWorkSensor::isNeededRead = true{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 32}}\par
}
{\xe \v readPeriod\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:readPeriod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2cStepWorkSensor::readPeriod = 0{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 33}}\par
}
{\xe \v sizeDelay\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:sizeDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2cStepWorkSensor::sizeDelay{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 30}}\par
}
{\xe \v startDelay\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:startDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2cStepWorkSensor::startDelay{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 29}}\par
}
{\xe \v startReadPeriod\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:startReadPeriod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgI2cStepWorkSensor::startReadPeriod = 0{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 34}}\par
}
{\xe \v step\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:step}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2cStepWorkSensor::step = {\b FLPROG_SENSOR_WAITING_READ_STEP}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 35}}\par
}
{\xe \v stepAfterDelay\:FLProgI2cStepWorkSensor}
{\xe \v FLProgI2cStepWorkSensor\:stepAfterDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgI2cStepWorkSensor::stepAfterDelay{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C_sensorsBasic.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 31}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C_sensorsBasic.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C_sensorsBasic.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgTCA9548A\par \pard\plain 
{\tc\tcl2 \v FLProgTCA9548A}
{\xe \v FLProgTCA9548A}
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
\par
{
{\f2 #include <flprogI2C.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgTCA9548A} ({\b FLProgI2C} *device, uint8_t deviceAddress)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgTCA9548A} ({\b FLProgI2C} *device)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b beginTransmission} (uint8_t addr, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (const uint8_t *data, uint8_t quantity, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b write} (uint8_t data, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b endTransmission} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b available} (uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b read} (uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b requestFrom} (uint8_t address, uint8_t quantity, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setSpeed} (uint32_t newSpeed, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b resetSpeedFrom} (uint32_t newSpeed, uint8_t chanel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b checkBus} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 61}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v FLProgTCA9548A\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:FLProgTCA9548A}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
FLProgTCA9548A::FLProgTCA9548A ({\b FLProgI2C} *  {\i device}, uint8_t  {\i deviceAddress})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 426}}\par
}
{\xe \v FLProgTCA9548A\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:FLProgTCA9548A}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
FLProgTCA9548A::FLProgTCA9548A ({\b FLProgI2C} *  {\i device})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 432}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v available\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:available}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgTCA9548A::available (uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 460}}\par
}
{\xe \v beginTransmission\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:beginTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTCA9548A::beginTransmission (uint8_t  {\i addr}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 438}}\par
}
{\xe \v checkBus\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:checkBus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgTCA9548A::checkBus ()}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 490}}\par
}
{\xe \v endTransmission\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:endTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgTCA9548A::endTransmission ()}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 454}}\par
}
{\xe \v read\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgTCA9548A::read (uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 466}}\par
}
{\xe \v requestFrom\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:requestFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgTCA9548A::requestFrom (uint8_t  {\i address}, uint8_t  {\i quantity}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 472}}\par
}
{\xe \v resetSpeedFrom\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:resetSpeedFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTCA9548A::resetSpeedFrom (uint32_t  {\i newSpeed}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 484}}\par
}
{\xe \v setSpeed\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:setSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTCA9548A::setSpeed (uint32_t  {\i newSpeed}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 478}}\par
}
{\xe \v write\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTCA9548A::write (const uint8_t *  {\i data}, uint8_t  {\i quantity}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 444}}\par
}
{\xe \v write\:FLProgTCA9548A}
{\xe \v FLProgTCA9548A\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTCA9548A::write (uint8_t  {\i data}, uint8_t  {\i chanel})}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 449}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgTcpDevice\par \pard\plain 
{\tc\tcl2 \v FLProgTcpDevice}
{\xe \v FLProgTcpDevice}
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
\par
{
{\f2 #include <flprogTcpDevice.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgTcpDevice:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_tcp_device.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b beClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b beServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPort} (int port)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b connected} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b connect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b connect} (byte ipFirst, byte ipSecond, byte ipThird, byte ipFourth)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b connect} (uint16_t ipFirst, uint16_t ipSecond, uint16_t ipThird, uint16_t ipFourth, int newPort)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b connect} (IPAddress newIp, int newPort)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (String data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b write} (byte buffer[], byte size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restart} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasServer} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual Client * {\b tcpClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setAvalibleClientFromServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual IPAddress {\b clientRemoteIp} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b clientRemotePort} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mode} = {\b FLPROG_TSP_CLIENT_MODE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tcpPort} = 502\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
IPAddress {\b workIp}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 17}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v available\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:available}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgTcpDevice::available ()}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 41}}\par
}
{\xe \v beClient\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:beClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::beClient ()}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 11}}\par
}
{\xe \v begin\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FLProgTcpDevice::begin (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHB \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 32}}\par
}
{\xe \v beServer\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:beServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::beServer ()}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 19}}\par
}
{\xe \v clientRemoteIp\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:clientRemoteIp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual IPAddress FLProgTcpDevice::clientRemoteIp (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 43}}\par
}
{\xe \v clientRemotePort\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:clientRemotePort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual int FLProgTcpDevice::clientRemotePort (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 44}}\par
}
{\xe \v connect\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::connect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 26}}\par
}
{\xe \v connect\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::connect (byte  {\i ipFirst}, byte  {\i ipSecond}, byte  {\i ipThird}, byte  {\i ipFourth}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 27}}\par
}
{\xe \v connect\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::connect (IPAddress  {\i newIp}, int  {\i newPort}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 81}}\par
}
{\xe \v connect\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::connect (uint16_t  {\i ipFirst}, uint16_t  {\i ipSecond}, uint16_t  {\i ipThird}, uint16_t  {\i ipFourth}, int  {\i newPort}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 71}}\par
}
{\xe \v connected\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:connected}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgTcpDevice::connected ()}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 56}}\par
}
{\xe \v hasClient\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:hasClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FLProgTcpDevice::hasClient (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHN \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 35}}\par
}
{\xe \v hasServer\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:hasServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FLProgTcpDevice::hasServer (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHP \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 36}}\par
}
{\xe \v print\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::print (String  {\i data})}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 61}}\par
}
{\xe \v read\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgTcpDevice::read ()}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 50}}\par
}
{\xe \v restart\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:restart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::restart ()}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 27}}\par
}
{\xe \v setAvalibleClientFromServer\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:setAvalibleClientFromServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FLProgTcpDevice::setAvalibleClientFromServer (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 42}}\par
}
{\xe \v setPort\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:setPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::setPort (int  {\i port})}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 3}}\par
}
{\xe \v stop\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgTcpDevice::stop ()}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 36}}\par
}
{\xe \v tcpClient\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:tcpClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Client * FLProgTcpDevice::tcpClient (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2\'F1\'FF \'E2 {\b FLProgW5100TcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 41}}\par
}
{\xe \v write\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgTcpDevice::write (byte  {\i buffer}[], byte  {\i size})}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 66}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v mode\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgTcpDevice::mode = {\b FLPROG_TSP_CLIENT_MODE}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 39}}\par
}
{\xe \v tcpPort\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:tcpPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgTcpDevice::tcpPort = 502{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 40}}\par
}
{\xe \v workIp\:FLProgTcpDevice}
{\xe \v FLProgTcpDevice\:workIp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IPAddress FLProgTcpDevice::workIp{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 45}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/tcp/{\b flprogTcpDevice.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/tcp/{\b flprogTcpDevice.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgUartBasic\par \pard\plain 
{\tc\tcl2 \v FLProgUartBasic}
{\xe \v FLProgUartBasic}
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
\par
{
{\f2 #include <flprogUart.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int32_t speed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b getPortSpeed} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b getPortDataBits} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b getPortStopBits} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b getPortParity} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasPort} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b restartPort} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPortSpeed} (byte speed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPortDataBits} (byte dataBits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPortStopBits} (byte stopBits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPortParity} (byte parity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b write} (byte *buffer, byte size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (String str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (const char str[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (char str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (byte val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (int val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (long val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (unsigned long val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (float val, int mode=2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (String str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (char str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (const char str[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (byte val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (int val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (long val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (unsigned long val, int mode=DEC)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} (float val, int mode=2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b println} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual Stream * {\b uartPort} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speedFromCode} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b serialCodeForParametrs} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCodeFromSpeed} (int32_t speed)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b portSpeed} = {\b FLPROG_SPEED_9600}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b portDataBits} = {\b FLPROG_PORT_DATA_BITS_8}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b portStopBits} = {\b FLPROG_PORT_STOP_BITS_1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b portParity} = {\b FLPROG_PORT_PARITY_NONE}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 45}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v available\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:available}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::available (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 60}}\par
}
{\xe \v begin\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FLProgUartBasic::begin (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 48}}\par
}
{\xe \v begin\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::begin (int32_t  {\i speed})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 113}}\par
}
{\xe \v getPortDataBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:getPortDataBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::getPortDataBits (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 51}}\par
}
{\xe \v getPortParity\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:getPortParity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::getPortParity (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 53}}\par
}
{\xe \v getPortSpeed\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:getPortSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::getPortSpeed (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 50}}\par
}
{\xe \v getPortStopBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:getPortStopBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::getPortStopBits (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 52}}\par
}
{\xe \v hasPort\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:hasPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FLProgUartBasic::hasPort (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 54}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (byte  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 67}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (char  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 66}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (const char  {\i str}[]){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 65}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (float  {\i val}, int  {\i mode} = {\f2 2}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 71}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (int  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 68}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (long  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 69}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (String  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 64}}\par
}
{\xe \v print\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::print (unsigned long  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 70}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 80}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (byte  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 75}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (char  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 73}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (const char  {\i str}[]){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 74}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (float  {\i val}, int  {\i mode} = {\f2 2}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 79}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (int  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 76}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (long  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 77}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (String  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 72}}\par
}
{\xe \v println\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:println}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::println (unsigned long  {\i val}, int  {\i mode} = {\f2 DEC}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 78}}\par
}
{\xe \v read\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::read (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 61}}\par
}
{\xe \v restartPort\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:restartPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void FLProgUartBasic::restartPort (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 55}}\par
}
{\xe \v serialCodeForParametrs\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:serialCodeForParametrs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgUartBasic::serialCodeForParametrs (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 73}}\par
}
{\xe \v setCodeFromSpeed\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:setCodeFromSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::setCodeFromSpeed (int32_t  {\i speed}){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 108}}\par
}
{\xe \v setPortDataBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:setPortDataBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::setPortDataBits (byte  {\i dataBits})}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 17}}\par
}
{\xe \v setPortParity\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:setPortParity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::setPortParity (byte  {\i parity})}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 54}}\par
}
{\xe \v setPortSpeed\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:setPortSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::setPortSpeed (byte  {\i speed})}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 3}}\par
}
{\xe \v setPortStopBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:setPortStopBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgUartBasic::setPortStopBits (byte  {\i stopBits})}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 35}}\par
}
{\xe \v speedFromCode\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:speedFromCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t FLProgUartBasic::speedFromCode (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 103}}\par
}
{\xe \v uartPort\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:uartPort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Stream * FLProgUartBasic::uartPort (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 83}}\par
}
{\xe \v write\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::write (byte *  {\i buffer}, byte  {\i size}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 62}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v portDataBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:portDataBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::portDataBits = {\b FLPROG_PORT_DATA_BITS_8}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 88}}\par
}
{\xe \v portParity\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:portParity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::portParity = {\b FLPROG_PORT_PARITY_NONE}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 90}}\par
}
{\xe \v portSpeed\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:portSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::portSpeed = {\b FLPROG_SPEED_9600}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 87}}\par
}
{\xe \v portStopBits\:FLProgUartBasic}
{\xe \v FLProgUartBasic\:portStopBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
byte FLProgUartBasic::portStopBits = {\b FLPROG_PORT_STOP_BITS_1}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 89}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/uart/{\b flprogUart.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/uart/{\b flprogUart.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgVirtualI2C\par \pard\plain 
{\tc\tcl2 \v FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C}
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
\par
{
{\f2 #include <flprogI2C.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgVirtualI2C:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_virtual_i2_c.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgVirtualI2C} ({\b FLProgTCA9548A} *parentDevice, uint8_t chanelOnParent)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b beginTransmission} (uint8_t addr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (const uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (uint8_t data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b endTransmission} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b requestFrom} (uint8_t address, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setSpeed} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b resetSpeedFrom} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b checkBus} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgI2C}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FLProgI2C} (byte busNumber=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b begin} (int pinSDA, int pinSCL)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b findAddr} (uint8_t addr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getErrorCode} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWrite} (uint8_t addr, uint8_t data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWrite} (uint8_t addr, const uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRequestFrom} (uint8_t address, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint16_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullRead} (uint8_t addr, uint32_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullReadReg} (uint8_t addr, uint8_t reg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b fullWriteReg} (uint8_t addr, uint8_t reg, uint8_t value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b beginTransmission} (uint8_t addr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (const uint8_t *data, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b write} (uint8_t data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b endTransmission} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b requestFrom} (uint8_t address, uint8_t quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual uint8_t {\b waitingForData} (uint8_t count)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setSpeed} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b resetSpeedFrom} (uint32_t newSpeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b checkBus} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'EE\'EF\'EE\'EB\'ED\'E8\'F2\'E5\'EB\'FC\'ED\'FB\'E5 \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgI2C}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b beginWire0} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5 \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgI2C}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b bus}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b busy} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b status} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b codeErr} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sda} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b scl} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b speed} = {\b FLPROG_I2CSPEED}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 85}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v FLProgVirtualI2C\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:FLProgVirtualI2C}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
FLProgVirtualI2C::FLProgVirtualI2C ({\b FLProgTCA9548A} *  {\i parentDevice}, uint8_t  {\i chanelOnParent})}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 516}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v available\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:available}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgVirtualI2C::available (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADZ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 547}}\par
}
{\xe \v begin\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgVirtualI2C::begin (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 522}}\par
}
{\xe \v beginTransmission\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:beginTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgVirtualI2C::beginTransmission (uint8_t  {\i addr}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 527}}\par
}
{\xe \v checkBus\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:checkBus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool FLProgVirtualI2C::checkBus (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 572}}\par
}
{\xe \v endTransmission\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:endTransmission}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgVirtualI2C::endTransmission (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEJ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 542}}\par
}
{\xe \v read\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int FLProgVirtualI2C::read (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 552}}\par
}
{\xe \v requestFrom\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:requestFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t FLProgVirtualI2C::requestFrom (uint8_t  {\i address}, uint8_t  {\i quantity}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEX \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 557}}\par
}
{\xe \v resetSpeedFrom\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:resetSpeedFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgVirtualI2C::resetSpeedFrom (uint32_t  {\i newSpeed}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 567}}\par
}
{\xe \v setSpeed\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:setSpeed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgVirtualI2C::setSpeed (uint32_t  {\i newSpeed}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFB \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 562}}\par
}
{\xe \v write\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgVirtualI2C::write (const uint8_t *  {\i data}, uint8_t  {\i quantity}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 532}}\par
}
{\xe \v write\:FLProgVirtualI2C}
{\xe \v FLProgVirtualI2C\:write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgVirtualI2C::write (uint8_t  {\i data}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgI2C} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 537}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/i2c/{\b flprogI2C.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 FLProgW5100TcpDevice\par \pard\plain 
{\tc\tcl2 \v FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice}
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
\par
{
{\f2 #include <flprogTcpDevice.h>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:FLProgW5100TcpDevice:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_f_l_prog_w5100_tcp_device.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasServer} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgTcpDevice}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b beClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b beServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b available} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b read} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPort} (int port)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b connected} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b connect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b connect} (byte ipFirst, byte ipSecond, byte ipThird, byte ipFourth)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b connect} (uint16_t ipFirst, uint16_t ipSecond, uint16_t ipThird, uint16_t ipFourth, int newPort)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b connect} (IPAddress newIp, int newPort)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print} (String data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
byte {\b write} (byte buffer[], byte size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b begin} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restart} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b hasServer} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual Client * {\b tcpClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setAvalibleClientFromServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual IPAddress {\b clientRemoteIp} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b clientRemotePort} ()\par
}

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual Client * {\b tcpClient} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setAvalibleClientFromServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual IPAddress {\b clientRemoteIp} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b clientRemotePort} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'EE\'EF\'EE\'EB\'ED\'E8\'F2\'E5\'EB\'FC\'ED\'FB\'E5 \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C7\'E0\'F9\'E8\'F9\'E5\'ED\'ED\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5 \'F3\'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'ED\'FB\'E5 \'EE\'F2 {\b FLProgTcpDevice}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mode} = {\b FLPROG_TSP_CLIENT_MODE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tcpPort} = 502\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
IPAddress {\b workIp}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 51}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v begin\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgW5100TcpDevice::begin (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 108}}\par
}
{\xe \v clientRemoteIp\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:clientRemoteIp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual IPAddress FLProgW5100TcpDevice::clientRemoteIp (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHD \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 61}}\par
}
{\xe \v clientRemotePort\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:clientRemotePort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual int FLProgW5100TcpDevice::clientRemotePort (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 62}}\par
}
{\xe \v hasClient\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:hasClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FLProgW5100TcpDevice::hasClient (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 55}}\par
}
{\xe \v hasServer\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:hasServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool FLProgW5100TcpDevice::hasServer (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHO \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 56}}\par
}
{\xe \v setAvalibleClientFromServer\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:setAvalibleClientFromServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FLProgW5100TcpDevice::setAvalibleClientFromServer (){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.cpp} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 117}}\par
}
{\xe \v tcpClient\:FLProgW5100TcpDevice}
{\xe \v FLProgW5100TcpDevice\:tcpClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Client * FLProgW5100TcpDevice::tcpClient (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CF\'E5\'F0\'E5\'EE\'EF\'F0\'E5\'E4\'E5\'EB\'FF\'E5\'F2 \'EC\'E5\'F2\'EE\'E4 \'EF\'F0\'E5\'E4\'EA\'E0 {\b FLProgTcpDevice} ({\i \'F1\'F2\'F0.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 59}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/tcp/{\b flprogTcpDevice.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/tcp/{\b flprogTcpDevice.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'D4\'E0\'E9\'EB\'FB{\tc \v \'D4\'E0\'E9\'EB\'FB}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/flprogUtilites.cpp\par \pard\plain 
{\tc\tcl2 \v src/flprogUtilites.cpp}
{\xe \v src/flprogUtilites.cpp}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilites.cpp\par \pard\plain 
{\tc\tcl2 \v src/flprogUtilites.cpp}
{\xe \v src/flprogUtilites.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUtilites.h"}\par
00002 \par
00003 {\cf18 int} flprog::serialCodeForParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity)\par
00004 \{\par
00005     {\cf18 int} code = 0;\par
00006     {\cf19 if} (portStopBits == 2)\par
00007     \{\par
00008         code = code + 8;\par
00009     \}\par
00010     {\cf19 if} (portDataBits == 6)\par
00011     \{\par
00012         code = code + 2;\par
00013     \}\par
00014     {\cf19 if} (portDataBits == 7)\par
00015     \{\par
00016         code = code + 4;\par
00017     \}\par
00018     {\cf19 if} (portDataBits == 8)\par
00019     \{\par
00020         code = code + 6;\par
00021     \}\par
00022     {\cf19 if} (portParity == 1)\par
00023     \{\par
00024         code = code + 32;\par
00025     \}\par
00026     {\cf19 if} (portParity == 2)\par
00027     \{\par
00028         code = code + 48;\par
00029     \}\par
00030     {\cf19 return} code;\par
00031 \}\par
00032 \par
00033 uint32_t flprog::speedFromCode({\cf18 byte} code)\par
00034 \{\par
00035     {\cf19 switch} (code)\par
00036     \{\par
00037     {\cf19 case} FLPROG_SPEED_300:\par
00038         {\cf19 return} 300;\par
00039         {\cf19 break};\par
00040     {\cf19 case} FLPROG_SPEED_600:\par
00041         {\cf19 return} 600;\par
00042         {\cf19 break};\par
00043     {\cf19 case} FLPROG_SPEED_1200:\par
00044         {\cf19 return} 1200;\par
00045         {\cf19 break};\par
00046     {\cf19 case} FLPROG_SPEED_2400:\par
00047         {\cf19 return} 2400;\par
00048         {\cf19 break};\par
00049     {\cf19 case} FLPROG_SPEED_4800:\par
00050         {\cf19 return} 4800;\par
00051         {\cf19 break};\par
00052     {\cf19 case} FLPROG_SPEED_9600:\par
00053         {\cf19 return} 9600;\par
00054         {\cf19 break};\par
00055     {\cf19 case} FLPROG_SPEED_14400:\par
00056         {\cf19 return} 14400;\par
00057         {\cf19 break};\par
00058     {\cf19 case} FLPROG_SPEED_19200:\par
00059         {\cf19 return} 19200;\par
00060         {\cf19 break};\par
00061     {\cf19 case} FLPROG_SPEED_28800:\par
00062         {\cf19 return} 28800;\par
00063         {\cf19 break};\par
00064     {\cf19 case} FLPROG_SPEED_38400:\par
00065         {\cf19 return} 38400;\par
00066         {\cf19 break};\par
00067     {\cf19 case} FLPROG_SPEED_57600:\par
00068         {\cf19 return} 57600;\par
00069         {\cf19 break};\par
00070     {\cf19 case} FLPROG_SPEED_115200:\par
00071         {\cf19 return} 115200;\par
00072         {\cf19 break};\par
00073     {\cf19 default}:\par
00074         {\cf19 return} 9600;\par
00075         {\cf19 break};\par
00076     \}\par
00077 \}\par
00078 \par
00079 uint8_t flprog::codeFromSpeed(int32_t speed)\par
00080 \{\par
00081     {\cf19 switch} (speed)\par
00082     \{\par
00083     {\cf19 case} 300:\par
00084         {\cf19 return} FLPROG_SPEED_300;\par
00085         {\cf19 break};\par
00086     {\cf19 case} 600:\par
00087         {\cf19 return} FLPROG_SPEED_600;\par
00088         {\cf19 break};\par
00089     {\cf19 case} 1200:\par
00090         {\cf19 return} FLPROG_SPEED_1200;\par
00091         {\cf19 break};\par
00092     {\cf19 case} 2400:\par
00093         {\cf19 return} FLPROG_SPEED_2400;\par
00094         {\cf19 break};\par
00095     {\cf19 case} 4800:\par
00096         {\cf19 return} FLPROG_SPEED_4800;\par
00097         {\cf19 break};\par
00098     {\cf19 case} 9600:\par
00099         {\cf19 return} FLPROG_SPEED_9600;\par
00100         {\cf19 break};\par
00101     {\cf19 case} 14400:\par
00102         {\cf19 return} FLPROG_SPEED_14400;\par
00103         {\cf19 break};\par
00104     {\cf19 case} 19200:\par
00105         {\cf19 return} FLPROG_SPEED_19200;\par
00106         {\cf19 break};\par
00107     {\cf19 case} 28800:\par
00108         {\cf19 return} FLPROG_SPEED_28800;\par
00109         {\cf19 break};\par
00110     {\cf19 case} 38400:\par
00111         {\cf19 return} FLPROG_SPEED_38400;\par
00112         {\cf19 break};\par
00113     {\cf19 case} 57600:\par
00114         {\cf19 return} FLPROG_SPEED_57600;\par
00115         {\cf19 break};\par
00116     {\cf19 case} 115200:\par
00117         {\cf19 return} FLPROG_SPEED_115200;\par
00118         {\cf19 break};\par
00119     \}\par
00120     {\cf19 return} FLPROG_SPEED_9600;\par
00121 \}\par
00122 \par
00123 uint32_t flprog::difference32(uint32_t start, uint32_t end)\par
00124 \{\par
00125     {\cf19 if} (end >= start)\par
00126     \{\par
00127         {\cf19 return} end - start;\par
00128     \}\par
00129     {\cf19 return} (0xfFFFFFFF - start) + end;\par
00130 \}\par
00131 \par
00132 {\cf18 bool} flprog::isTimer(uint32_t startTime, uint32_t period)\par
00133 \{\par
00134     {\cf19 return} (difference32(startTime, (millis()))) >= period;\par
00135 \}\par
00136 \par
00137 {\cf18 bool} flprog::isTimerMicros({\cf18 unsigned} {\cf18 long} startTime, {\cf18 unsigned} {\cf18 long} period)\par
00138 \{\par
00139     {\cf19 return} (difference32(startTime, (micros()))) >= period;\par
00140 \}\par
00141 \par
00142 uint32_t flprog::timeBack(uint32_t value)\par
00143 \{\par
00144     uint32_t current = millis();\par
00145     {\cf19 if} (value < current)\par
00146     \{\par
00147         {\cf19 return} current - value;\par
00148     \}\par
00149     {\cf19 return} (0xfFFFFFFF - value) + current;\par
00150 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/flprogUtilites.h\par \pard\plain 
{\tc\tcl2 \v src/flprogUtilites.h}
{\xe \v src/flprogUtilites.h}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Arduino.h>}\par
{\f2 #include "i2c/flprogI2C.h"}\par
{\f2 #include "uart/flprogUart.h"}\par
{\f2 #include "tcp/flprogTcpDevice.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b flprog}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_NOT_ERROR}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_NOT_READY_ERROR}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_DEVICE_NOT_FOUND_ERROR}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_DEVICE_NOT_CORRECT_BUS_NUMBER_ERROR}\~ 65\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_DEVICE_NOT_CORRECT_DEVICE_ADDRESS_ERROR}\~ 61\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_DEVICE_NOT_DEFINED_ERROR}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_DEVICE_NOT_CORRECT_DATA_ERROR}\~ 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_CRC_ERROR}\~ 72\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_WAITING_READ_STEP}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SENSOR_WAITING_DELAY}\~ 1\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D4\'F3\'ED\'EA\'F6\'E8\'E8\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b flprog::isTimer} (uint32_t startTime, uint32_t period)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b flprog::isTimerMicros} (unsigned long startTime, unsigned long period)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b flprog::serialCodeForParametrs} (byte portDataBits, byte portStopBits, byte portParity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b flprog::speedFromCode} (byte code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b flprog::codeFromSpeed} (int32_t speed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b flprog::difference32} (uint32_t start, uint32_t end)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b flprog::timeBack} (uint32_t value)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 
{\xe \v FLPROG_SENSOR_CRC_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_CRC_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_CRC_ERROR\~ 72}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 11}}\par
}
{\xe \v FLPROG_SENSOR_DEVICE_NOT_CORRECT_BUS_NUMBER_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_DEVICE_NOT_CORRECT_BUS_NUMBER_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_DEVICE_NOT_CORRECT_BUS_NUMBER_ERROR\~ 65}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 7}}\par
}
{\xe \v FLPROG_SENSOR_DEVICE_NOT_CORRECT_DATA_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_DEVICE_NOT_CORRECT_DATA_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_DEVICE_NOT_CORRECT_DATA_ERROR\~ 6}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 10}}\par
}
{\xe \v FLPROG_SENSOR_DEVICE_NOT_CORRECT_DEVICE_ADDRESS_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_DEVICE_NOT_CORRECT_DEVICE_ADDRESS_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_DEVICE_NOT_CORRECT_DEVICE_ADDRESS_ERROR\~ 61}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 8}}\par
}
{\xe \v FLPROG_SENSOR_DEVICE_NOT_DEFINED_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_DEVICE_NOT_DEFINED_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_DEVICE_NOT_DEFINED_ERROR\~ 5}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 9}}\par
}
{\xe \v FLPROG_SENSOR_DEVICE_NOT_FOUND_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_DEVICE_NOT_FOUND_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_DEVICE_NOT_FOUND_ERROR\~ 2}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 6}}\par
}
{\xe \v FLPROG_SENSOR_NOT_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_NOT_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_NOT_ERROR\~ 0}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 4}}\par
}
{\xe \v FLPROG_SENSOR_NOT_READY_ERROR\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_NOT_READY_ERROR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_NOT_READY_ERROR\~ 1}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 5}}\par
}
{\xe \v FLPROG_SENSOR_WAITING_DELAY\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_WAITING_DELAY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_WAITING_DELAY\~ 1}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 14}}\par
}
{\xe \v FLPROG_SENSOR_WAITING_READ_STEP\:flprogUtilites.h}
{\xe \v flprogUtilites.h\:FLPROG_SENSOR_WAITING_READ_STEP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SENSOR_WAITING_READ_STEP\~ 0}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUtilites.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 13}}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilites.h\par \pard\plain 
{\tc\tcl2 \v src/flprogUtilites.h}
{\xe \v src/flprogUtilites.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include <Arduino.h>}\par
00003 \par
00004 {\cf21 #define FLPROG_SENSOR_NOT_ERROR 0}\par
00005 {\cf21 #define FLPROG_SENSOR_NOT_READY_ERROR 1}\par
00006 {\cf21 #define FLPROG_SENSOR_DEVICE_NOT_FOUND_ERROR 2}\par
00007 {\cf21 #define FLPROG_SENSOR_DEVICE_NOT_CORRECT_BUS_NUMBER_ERROR 65}\par
00008 {\cf21 #define FLPROG_SENSOR_DEVICE_NOT_CORRECT_DEVICE_ADDRESS_ERROR 61}\par
00009 {\cf21 #define FLPROG_SENSOR_DEVICE_NOT_DEFINED_ERROR 5}\par
00010 {\cf21 #define FLPROG_SENSOR_DEVICE_NOT_CORRECT_DATA_ERROR 6}\par
00011 {\cf21 #define FLPROG_SENSOR_CRC_ERROR 72}\par
00012 \par
00013 {\cf21 #define FLPROG_SENSOR_WAITING_READ_STEP 0}\par
00014 {\cf21 #define FLPROG_SENSOR_WAITING_DELAY 1}\par
00015 \par
00016 {\cf21 #if defined(ESP8266) || defined(ESP32)}\par
00017 {\cf21 #define FLPROG_CORE_ESP8266_OR_ESP32}\par
00018 {\cf21 #endif}\par
00019 \par
00020 {\cf21 #ifdef ESP8266}\par
00021 {\cf21 #define FLPROG_CORE_ESP8266}\par
00022 {\cf21 #include "variant\\esp8266\\flprogUtilitesESP8266.h"}\par
00023 {\cf21 #endif}\par
00024 \par
00025 {\cf21 #ifdef ESP32}\par
00026 {\cf21 #define FLPROG_CORE_ESP32}\par
00027 {\cf21 #include "variant\\esp32\\flprogUtilitesESP32.h"}\par
00028 {\cf21 #endif}\par
00029 \par
00030 {\cf21 #ifdef _STM32_DEF_}\par
00031 {\cf21 #define FLPROG_CORE_STM32}\par
00032 {\cf21 #endif}\par
00033 \par
00034 {\cf21 #ifdef _STM8_DEF_}\par
00035 {\cf21 #define FLPROG_CORE_STM8}\par
00036 {\cf21 #endif}\par
00037 \par
00038 {\cf21 #if defined(FLPROG_CORE_STM32) || defined(FLPROG_CORE_STM8)}\par
00039 {\cf21 #define FLPROG_CORE_STM}\par
00040 {\cf21 #endif}\par
00041 \par
00042 {\cf21 #if defined(_STM32_DEF_) && defined(USBCON) && defined(USBD_USE_CDC)}\par
00043 {\cf21 #define FLPROG_STM32_USB_COM0}\par
00044 {\cf21 #endif}\par
00045 \par
00046 {\cf21 #ifdef _UART_CLASS_}\par
00047 {\cf21 #define FLPROG_CORE_AVR_DUE}\par
00048 {\cf21 #include "variant\\arduino\\due\\flprogUtilitesDUE.h"}\par
00049 {\cf21 #endif}\par
00050 \par
00051 {\cf21 #ifdef __AVR__}\par
00052 {\cf21 #ifndef FLPROG_CORE_AVR_DUE}\par
00053 {\cf21 #define FLPROG_CORE_AVR}\par
00054 {\cf21 #endif}\par
00055 {\cf21 #endif}\par
00056 \par
00057 {\cf21 #if defined(FLPROG_CORE_AVR) || defined(FLPROG_CORE_STM8) || defined(FLPROG_CORE_STM32) || defined(FLPROG_CORE_ESP32)}\par
00058 {\cf21 #define FLPROG_UNIVTRSAL_FUNCTION}\par
00059 {\cf21 #include "variant\\arduino\\avr\\flprogUtilitesAVR.h"}\par
00060 {\cf21 #endif}\par
00061 \par
00062 {\cf21 #include "i2c/flprogI2C.h"}\par
00063 {\cf21 #include "uart/flprogUart.h"}\par
00064 {\cf21 #include "tcp/flprogTcpDevice.h"}\par
00065 \par
00066 {\cf17 namespace }flprog\par
00067 \{\par
00068     {\cf18 bool} isTimer(uint32_t startTime, uint32_t period);\par
00069     {\cf18 bool} isTimerMicros({\cf18 unsigned} {\cf18 long} startTime, {\cf18 unsigned} {\cf18 long} period);\par
00070     {\cf18 int} serialCodeForParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity);\par
00071     uint32_t speedFromCode({\cf18 byte} code);\par
00072     uint8_t codeFromSpeed(int32_t speed);\par
00073     uint32_t difference32(uint32_t start, uint32_t end);\par
00074     uint32_t timeBack(uint32_t value);\par
00075 \par
00076 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/i2c/flprogI2C.cpp\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C.cpp}
{\xe \v src/i2c/flprogI2C.cpp}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogI2C.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogI2C.cpp\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C.cpp}
{\xe \v src/i2c/flprogI2C.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogI2C.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_STM32}\par
00004 TwoWire Wire1(PB11, PB10);\par
00005 {\cf21 #endif}\par
00006 \par
00007 FLProgI2C::FLProgI2C({\cf18 byte} busNumber)\par
00008 \{\par
00009     bus = busNumber;\par
00010 \}\par
00011 \par
00012 {\cf18 bool} FLProgI2C::checkBus()\par
00013 \{\par
00014     {\cf19 if} (bus == 0)\par
00015     \{\par
00016         {\cf19 return} {\cf17 true};\par
00017     \}\par
00018 {\cf21 #ifdef FLPROG_FLPROG_CAN_USE_I2C_1}\par
00019     {\cf19 if} (bus == 1)\par
00020     \{\par
00021 \par
00022         {\cf19 return} {\cf17 true};\par
00023     \}\par
00024 {\cf21 #endif}\par
00025     {\cf19 return} {\cf17 false};\par
00026 \}\par
00027 \par
00028 {\cf18 bool} FLProgI2C::begin({\cf18 int} pinSDA, {\cf18 int} pinSCL)\par
00029 \{\par
00030     sda = pinSDA;\par
00031     scl = pinSCL;\par
00032     {\cf19 return} begin();\par
00033 \}\par
00034 \par
00035 {\cf20 // ---------BEGIN---------}\par
00036 \par
00037 {\cf18 bool} FLProgI2C::begin()\par
00038 \{\par
00039     codeErr = 0; {\cf20 //--\'CE\'F7\'E8\'F1\'F2\'EA\'E0 \'EA\'EE\'E4\'E0 \'EE\'F8\'E8\'E1\'EA\'E8;}\par
00040     {\cf19 if} (!checkBus())\par
00041     \{\par
00042         codeErr = 65;\par
00043         {\cf19 return} {\cf17 false};\par
00044     \}\par
00045     {\cf19 if} (status == 1)\par
00046     \{\par
00047         {\cf19 return} {\cf17 true};\par
00048     \}\par
00049     {\cf19 if} (bus == 0)\par
00050     \{\par
00051         {\cf19 return} beginWire0();\par
00052     \}\par
00053 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00054     {\cf19 if} (bus == 1)\par
00055     \{\par
00056 \par
00057         {\cf19 return} beginWire1();\par
00058     \}\par
00059 {\cf21 #endif}\par
00060     {\cf19 return} {\cf17 false};\par
00061 \}\par
00062 \par
00063 {\cf18 bool} FLProgI2C::beginWire0()\par
00064 \{\par
00065 {\cf21 #ifdef FLPROG_CORE_AVR}\par
00066     Wire.begin(); {\cf20 //--\'C8\'ED\'E8\'F6\'E8\'E0\'EB\'E8\'E7\'E0\'F6\'E8\'FF \'EA\'E0\'EA Master;}\par
00067 {\cf21 #endif}\par
00068 \par
00069 {\cf21 #if defined(CORE_ESP8266) || defined(CORE_STM32)}\par
00070     {\cf19 if} ((sda < 0) || (scl < 0))\par
00071     \{\par
00072         Wire.begin();\par
00073     \}\par
00074     {\cf19 else}\par
00075     \{\par
00076         Wire.begin(sda, scl); {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'ED\'EE\'EC\'E5\'F0\'EE\'E2 \'EF\'E8\'ED\'EE\'E2 SDA,SCL \'E8 \'E8\'ED\'E8\'F6\'E8\'E0\'EB\'E8\'E7\'E0\'F6\'E8\'FF \'EA\'E0\'EA Master;}\par
00077     \}\par
00078 \par
00079 {\cf21 #endif}\par
00080 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00081     Wire.setClockStretchLimit(260); {\cf20 //--\'CE\'E3\'F0\'E0\'ED\'E8\'F7\'E5\'ED\'E8\'E5 \'EB\'E8\'EC\'E8\'F2\'E0 \'EF\'EE \'E2\'F0\'E5\'EC\'E5\'ED\'E8;}\par
00082 {\cf21 #endif}\par
00083 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00084     Wire.begin(sda, scl, speed);\par
00085 {\cf21 #endif}\par
00086 {\cf21 #ifndef FLPROG_CORE_ESP32}\par
00087     Wire.setClock(speed); {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'F7\'E0\'F1\'F2\'EE\'F2\'FB \'F8\'E8\'ED\'FB;}\par
00088 {\cf21 #endif}\par
00089     status = 1; {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'F1\'F2\'E0\'F2\'F3\'F1\'E0 Master \'E8 \'F3\'F1\'EF\'E5\'F8\'ED\'FB\'E9 \'E2\'FB\'F5\'EE\'E4;}\par
00090     {\cf19 return} {\cf17 true};\par
00091 \}\par
00092 \par
00093 {\cf21 #ifdef FLPROG_FLPROG_CAN_USE_I2C_1}\par
00094 {\cf18 bool} FLProgI2C::beginWire1()\par
00095 \{\par
00096 {\cf21 #ifdef CORE_STM32}\par
00097     {\cf19 if} ((sda < 0) || (scl < 0))\par
00098     \{\par
00099         Wire1.begin();\par
00100     \}\par
00101     {\cf19 else}\par
00102     \{\par
00103         Wire1.begin(sda, scl); {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'ED\'EE\'EC\'E5\'F0\'EE\'E2 \'EF\'E8\'ED\'EE\'E2 SDA,SCL \'E8 \'E8\'ED\'E8\'F6\'E8\'E0\'EB\'E8\'E7\'E0\'F6\'E8\'FF \'EA\'E0\'EA Master;}\par
00104     \}\par
00105 \par
00106     Wire1.setClock(speed); {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'F7\'E0\'F1\'F2\'EE\'F2\'FB \'F8\'E8\'ED\'FB;}\par
00107 {\cf21 #endif}\par
00108 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00109     Wire1.begin(sda, scl, speed);\par
00110     Wire1.setClock(speed); {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'F7\'E0\'F1\'F2\'EE\'F2\'FB \'F8\'E8\'ED\'FB;}\par
00111 {\cf21 #endif}\par
00112     status = 1; {\cf20 //--\'D3\'F1\'F2\'E0\'ED\'EE\'E2\'EA\'E0 \'F1\'F2\'E0\'F2\'F3\'F1\'E0 Master \'E8 \'F3\'F1\'EF\'E5\'F8\'ED\'FB\'E9 \'E2\'FB\'F5\'EE\'E4;}\par
00113     {\cf19 return} {\cf17 true};\par
00114 \}\par
00115 {\cf21 #endif}\par
00116 \par
00117 {\cf20 // ---------END_BEGIN---------}\par
00118 \par
00119 {\cf18 bool} FLProgI2C::findAddr(uint8_t addr)\par
00120 \{\par
00121     {\cf19 if} (!checkBus())\par
00122     \{\par
00123         codeErr = 65;\par
00124         {\cf19 return} {\cf17 false};\par
00125     \}\par
00126     codeErr = 0;\par
00127     {\cf19 if} (addr > 254)\par
00128     \{\par
00129         codeErr = 61;\par
00130         {\cf19 return} {\cf17 false};\par
00131     \}\par
00132     beginTransmission(addr);\par
00133     codeErr = endTransmission();\par
00134     {\cf19 return} (codeErr == 0);\par
00135 \}\par
00136 \par
00137 uint8_t FLProgI2C::fullWrite(uint8_t addr, uint8_t data)\par
00138 \{\par
00139     beginTransmission(addr);\par
00140     write(data);\par
00141     codeErr = endTransmission();\par
00142     {\cf19 return} codeErr;\par
00143 \}\par
00144 \par
00145 uint8_t FLProgI2C::fullWrite(uint8_t addr, {\cf17 const} uint8_t *data, uint8_t quantity)\par
00146 \{\par
00147     beginTransmission(addr);\par
00148     write(data, quantity);\par
00149     codeErr = endTransmission();\par
00150     {\cf19 return} codeErr;\par
00151 \}\par
00152 \par
00153 uint8_t FLProgI2C::fullRequestFrom(uint8_t address, uint8_t quantity)\par
00154 \{\par
00155     uint8_t result = requestFrom(address, quantity);\par
00156     {\cf19 if} (quantity != result)\par
00157     \{\par
00158         codeErr = 80;\par
00159         {\cf19 return} codeErr;\par
00160     \}\par
00161     {\cf19 return} waitingForData(quantity);\par
00162 \}\par
00163 \par
00164 uint8_t FLProgI2C::fullRead(uint8_t addr, uint8_t *data, uint8_t quantity)\par
00165 \{\par
00166     codeErr = fullRequestFrom(addr, quantity);\par
00167     {\cf19 if} (codeErr)\par
00168     \{\par
00169         {\cf19 return} codeErr;\par
00170     \}\par
00171     {\cf19 for} (uint8_t i = 0; i < quantity; i++)\par
00172     \{\par
00173         data[i] = read();\par
00174     \}\par
00175     {\cf19 return} codeErr;\par
00176 \}\par
00177 \par
00178 uint8_t FLProgI2C::fullRead(uint8_t addr, uint16_t *data, uint8_t quantity)\par
00179 \{\par
00180     codeErr = fullRequestFrom(addr, quantity);\par
00181     {\cf19 if} (codeErr)\par
00182     \{\par
00183         {\cf19 return} codeErr;\par
00184     \}\par
00185     {\cf19 for} (uint8_t i = 0; i < quantity; i++)\par
00186     \{\par
00187         data[i] = read();\par
00188     \}\par
00189     {\cf19 return} codeErr;\par
00190 \}\par
00191 \par
00192 uint8_t FLProgI2C::fullRead(uint8_t addr, uint32_t *data, uint8_t quantity)\par
00193 \{\par
00194     codeErr = fullRequestFrom(addr, quantity);\par
00195     {\cf19 if} (codeErr)\par
00196     \{\par
00197         {\cf19 return} codeErr;\par
00198     \}\par
00199     {\cf19 for} (uint8_t i = 0; i < quantity; i++)\par
00200     \{\par
00201         data[i] = read();\par
00202     \}\par
00203     {\cf19 return} codeErr;\par
00204 \}\par
00205 \par
00206 {\cf18 void} FLProgI2C::beginTransmission(uint8_t addr)\par
00207 \{\par
00208     {\cf19 if} (!checkBus())\par
00209     \{\par
00210         codeErr = 65;\par
00211         {\cf19 return};\par
00212     \}\par
00213     {\cf19 if} (bus == 0)\par
00214     \{\par
00215         Wire.beginTransmission(addr);\par
00216     \}\par
00217 {\cf21 #ifdef FLPROG_FLPROG_CAN_USE_I2C_1}\par
00218     {\cf19 if} (bus == 1)\par
00219     \{\par
00220         Wire1.beginTransmission(addr);\par
00221     \}\par
00222 {\cf21 #endif}\par
00223 \}\par
00224 \par
00225 {\cf18 void} FLProgI2C::write({\cf17 const} uint8_t *data, uint8_t quantity)\par
00226 \{\par
00227     {\cf19 if} (!checkBus())\par
00228     \{\par
00229         codeErr = 65;\par
00230         {\cf19 return};\par
00231     \}\par
00232     {\cf19 if} (bus == 0)\par
00233     \{\par
00234         Wire.write(data, quantity);\par
00235     \}\par
00236 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00237     {\cf19 if} (bus == 1)\par
00238     \{\par
00239         Wire1.write(data, quantity);\par
00240     \}\par
00241 {\cf21 #endif}\par
00242 \}\par
00243 \par
00244 uint8_t FLProgI2C::endTransmission()\par
00245 \{\par
00246     {\cf19 if} (!checkBus())\par
00247     \{\par
00248         codeErr = 65;\par
00249         {\cf19 return} codeErr;\par
00250     \}\par
00251     {\cf19 if} (bus == 0)\par
00252     \{\par
00253         {\cf19 return} Wire.endTransmission();\par
00254     \}\par
00255 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00256     {\cf19 if} (bus == 1)\par
00257     \{\par
00258         {\cf19 return} Wire1.endTransmission();\par
00259     \}\par
00260 {\cf21 #endif}\par
00261 \par
00262     {\cf19 return} 0;\par
00263 \}\par
00264 \par
00265 {\cf18 int} FLProgI2C::available()\par
00266 \{\par
00267     {\cf19 if} (bus == 0)\par
00268     \{\par
00269         {\cf19 return} Wire.available();\par
00270     \}\par
00271 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00272     {\cf19 if} (bus == 1)\par
00273     \{\par
00274         {\cf19 return} Wire1.available();\par
00275     \}\par
00276 {\cf21 #endif}\par
00277     {\cf19 return} 0;\par
00278 \}\par
00279 \par
00280 {\cf18 int} FLProgI2C::read()\par
00281 \{\par
00282     {\cf19 if} (bus == 0)\par
00283     \{\par
00284         {\cf19 return} Wire.read();\par
00285     \}\par
00286 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00287     {\cf19 if} (bus == 1)\par
00288     \{\par
00289         {\cf19 return} Wire1.read();\par
00290     \}\par
00291 {\cf21 #endif}\par
00292     {\cf19 return} 0;\par
00293 \}\par
00294 \par
00295 uint8_t FLProgI2C::requestFrom(uint8_t address, uint8_t quantity)\par
00296 \{\par
00297     {\cf19 if} (!checkBus())\par
00298     \{\par
00299         codeErr = 65;\par
00300         {\cf19 return} codeErr;\par
00301     \}\par
00302 \par
00303     {\cf19 if} (bus == 0)\par
00304     \{\par
00305         {\cf19 return} Wire.requestFrom(address, quantity);\par
00306     \}\par
00307 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00308     {\cf19 if} (bus == 1)\par
00309     \{\par
00310         {\cf19 return} Wire1.requestFrom(address, quantity);\par
00311     \}\par
00312 {\cf21 #endif}\par
00313     {\cf19 return} 0;\par
00314 \}\par
00315 \par
00316 {\cf18 void} FLProgI2C::write(uint8_t data)\par
00317 \{\par
00318     {\cf19 if} (!checkBus())\par
00319     \{\par
00320         codeErr = 65;\par
00321         {\cf19 return};\par
00322     \}\par
00323     {\cf19 if} (bus == 0)\par
00324     \{\par
00325         Wire.write(data);\par
00326     \}\par
00327 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00328     {\cf19 if} (bus == 1)\par
00329     \{\par
00330         Wire1.write(data);\par
00331     \}\par
00332 {\cf21 #endif}\par
00333 \}\par
00334 \par
00335 uint8_t FLProgI2C::waitingForData(uint8_t count)\par
00336 \{\par
00337     uint32_t timeOut = 150 * count;\par
00338     uint32_t startTime = micros();\par
00339     {\cf19 do}\par
00340     \{\par
00341         {\cf19 if} ((available()) >= count)\par
00342         \{\par
00343             {\cf19 return} 0;\par
00344         \}\par
00345         {\cf19 if} (flprog::isTimerMicros(startTime, timeOut))\par
00346         \{\par
00347             {\cf19 return} 6;\par
00348         \}\par
00349     \} {\cf19 while} (1);\par
00350 \}\par
00351 \par
00352 {\cf18 void} FLProgI2C::setSpeed(uint32_t newSpeed)\par
00353 \{\par
00354     {\cf19 if} (!checkBus())\par
00355     \{\par
00356         codeErr = 65;\par
00357         {\cf19 return};\par
00358     \}\par
00359     {\cf19 if} (newSpeed == speed)\par
00360     \{\par
00361         {\cf19 return};\par
00362     \}\par
00363     {\cf19 if} (bus == 0)\par
00364     \{\par
00365         Wire.setClock(newSpeed);\par
00366     \}\par
00367 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00368     {\cf19 if} (bus == 1)\par
00369     \{\par
00370         Wire1.setClock(newSpeed);\par
00371     \}\par
00372 {\cf21 #endif}\par
00373 \}\par
00374 \par
00375 {\cf18 void} FLProgI2C::resetSpeedFrom(uint32_t newSpeed)\par
00376 \{\par
00377     {\cf19 if} (!checkBus())\par
00378     \{\par
00379         codeErr = 65;\par
00380         {\cf19 return};\par
00381     \}\par
00382     {\cf19 if} (newSpeed == speed)\par
00383     \{\par
00384         {\cf19 return};\par
00385     \}\par
00386 \par
00387     {\cf19 if} (bus == 0)\par
00388     \{\par
00389         Wire.setClock(speed);\par
00390     \}\par
00391 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00392     {\cf19 if} (bus == 1)\par
00393     \{\par
00394         Wire1.setClock(speed);\par
00395     \}\par
00396 {\cf21 #endif}\par
00397 \}\par
00398 \par
00399 uint8_t FLProgI2C::fullReadReg(uint8_t addr, uint8_t reg)\par
00400 \{\par
00401     uint8_t data[1];\par
00402     codeErr = fullWrite(addr, reg);\par
00403     {\cf19 if} (codeErr)\par
00404     \{\par
00405         {\cf19 return} 0;\par
00406     \}\par
00407     codeErr = fullRead(addr, data, 1);\par
00408     {\cf19 if} (codeErr)\par
00409     \{\par
00410         {\cf19 return} 0;\par
00411     \}\par
00412     {\cf19 return} data[0];\par
00413 \}\par
00414 \par
00415 uint8_t FLProgI2C::fullWriteReg(uint8_t addr, uint8_t reg, uint8_t value)\par
00416 \{\par
00417     uint8_t data[2];\par
00418     data[0] = reg;\par
00419     data[1] = value;\par
00420     codeErr = fullWrite(addr, data, 2);\par
00421     {\cf19 return} codeErr;\par
00422 \}\par
00423 \par
00424 {\cf20 //--------------FLProgTCA9548A----------}\par
00425 \par
00426 FLProgTCA9548A::FLProgTCA9548A(FLProgI2C *device, uint8_t deviceAddress)\par
00427 \{\par
00428     i2cDevice = device;\par
00429     address = deviceAddress;\par
00430 \}\par
00431 \par
00432 FLProgTCA9548A::FLProgTCA9548A(FLProgI2C *device)\par
00433 \{\par
00434     i2cDevice = device;\par
00435     address = 0x70;\par
00436 \}\par
00437 \par
00438 {\cf18 void} FLProgTCA9548A::beginTransmission(uint8_t addr, uint8_t chanel)\par
00439 \{\par
00440     switchToChanel(chanel);\par
00441     i2cDevice->beginTransmission(addr);\par
00442 \}\par
00443 \par
00444 {\cf18 void} FLProgTCA9548A::write({\cf17 const} uint8_t *data, uint8_t quantity, uint8_t chanel)\par
00445 \{\par
00446     i2cDevice->write(data, quantity);\par
00447 \}\par
00448 \par
00449 {\cf18 void} FLProgTCA9548A::write(uint8_t data, uint8_t chanel)\par
00450 \{\par
00451     i2cDevice->write(data);\par
00452 \}\par
00453 \par
00454 uint8_t FLProgTCA9548A::endTransmission()\par
00455 \{\par
00456 \par
00457     {\cf19 return} i2cDevice->endTransmission();\par
00458 \}\par
00459 \par
00460 {\cf18 int} FLProgTCA9548A::available(uint8_t chanel)\par
00461 \{\par
00462     switchToChanel(chanel);\par
00463     {\cf19 return} i2cDevice->available();\par
00464 \}\par
00465 \par
00466 {\cf18 int} FLProgTCA9548A::read(uint8_t chanel)\par
00467 \{\par
00468     switchToChanel(chanel);\par
00469     {\cf19 return} i2cDevice->read();\par
00470 \}\par
00471 \par
00472 uint8_t FLProgTCA9548A::requestFrom(uint8_t address, uint8_t quantity, uint8_t chanel)\par
00473 \{\par
00474     switchToChanel(chanel);\par
00475     {\cf19 return} i2cDevice->requestFrom(address, quantity);\par
00476 \}\par
00477 \par
00478 {\cf18 void} FLProgTCA9548A::setSpeed(uint32_t newSpeed, uint8_t chanel)\par
00479 \{\par
00480     switchToChanel(chanel);\par
00481     {\cf19 return} i2cDevice->setSpeed(newSpeed);\par
00482 \}\par
00483 \par
00484 {\cf18 void} FLProgTCA9548A::resetSpeedFrom(uint32_t newSpeed, uint8_t chanel)\par
00485 \{\par
00486     switchToChanel(chanel);\par
00487     {\cf19 return} i2cDevice->resetSpeedFrom(newSpeed);\par
00488 \}\par
00489 \par
00490 {\cf18 bool} FLProgTCA9548A::checkBus()\par
00491 \{\par
00492     {\cf19 return} i2cDevice->checkBus();\par
00493 \}\par
00494 \par
00495 {\cf18 void} FLProgTCA9548A::switchToChanel(uint8_t chanel)\par
00496 \{\par
00497     {\cf19 if} (chanel == currentChanel)\par
00498     \{\par
00499         {\cf19 return};\par
00500     \}\par
00501 \par
00502     {\cf19 if} (chanel > 7)\par
00503     \{\par
00504         errorCode = 80;\par
00505         {\cf19 return};\par
00506     \}\par
00507 \par
00508     i2cDevice->beginTransmission(address);\par
00509     i2cDevice->write(1 << chanel);\par
00510     errorCode = i2cDevice->endTransmission();\par
00511     currentChanel = chanel;\par
00512 \}\par
00513 \par
00514 {\cf20 //--------------FLProgVirtualI2C----------}\par
00515 \par
00516 FLProgVirtualI2C::FLProgVirtualI2C(FLProgTCA9548A *parentDevice, uint8_t chanelOnParent)\par
00517 \{\par
00518     parent = parentDevice;\par
00519     chanel = chanelOnParent;\par
00520 \}\par
00521 \par
00522 {\cf18 bool} FLProgVirtualI2C::begin()\par
00523 \{\par
00524     {\cf19 return} {\cf17 true};\par
00525 \}\par
00526 \par
00527 {\cf18 void} FLProgVirtualI2C::beginTransmission(uint8_t addr)\par
00528 \{\par
00529     parent->beginTransmission(addr, chanel);\par
00530 \}\par
00531 \par
00532 {\cf18 void} FLProgVirtualI2C::write({\cf17 const} uint8_t *data, uint8_t quantity)\par
00533 \{\par
00534     parent->write(data, quantity, chanel);\par
00535 \}\par
00536 \par
00537 {\cf18 void} FLProgVirtualI2C::write(uint8_t data)\par
00538 \{\par
00539     parent->write(data, chanel);\par
00540 \}\par
00541 \par
00542 uint8_t FLProgVirtualI2C::endTransmission()\par
00543 \{\par
00544     {\cf19 return} parent->endTransmission();\par
00545 \}\par
00546 \par
00547 {\cf18 int} FLProgVirtualI2C::available()\par
00548 \{\par
00549     {\cf19 return} parent->available(chanel);\par
00550 \}\par
00551 \par
00552 {\cf18 int} FLProgVirtualI2C::read()\par
00553 \{\par
00554     {\cf19 return} parent->read(chanel);\par
00555 \}\par
00556 \par
00557 uint8_t FLProgVirtualI2C::requestFrom(uint8_t address, uint8_t quantity)\par
00558 \{\par
00559     {\cf19 return} parent->requestFrom(address, quantity, chanel);\par
00560 \}\par
00561 \par
00562 {\cf18 void} FLProgVirtualI2C::setSpeed(uint32_t newSpeed)\par
00563 \{\par
00564     parent->setSpeed(newSpeed, chanel);\par
00565 \}\par
00566 \par
00567 {\cf18 void} FLProgVirtualI2C::resetSpeedFrom(uint32_t newSpeed)\par
00568 \{\par
00569     parent->resetSpeedFrom(newSpeed, chanel);\par
00570 \}\par
00571 \par
00572 {\cf18 bool} FLProgVirtualI2C::checkBus()\par
00573 \{\par
00574     {\cf19 return} parent->checkBus();\par
00575 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/i2c/flprogI2C.h\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C.h}
{\xe \v src/i2c/flprogI2C.h}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include <Wire.h>}\par
{\f2 #include "flprogUtilites.h"}\par
{\f2 #include "flprogI2C_sensorsBasic.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgI2C}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgTCA9548A}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgVirtualI2C}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_I2CSPEED}\~ 400000UL;\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 
{\xe \v FLPROG_I2CSPEED\:flprogI2C.h}
{\xe \v flprogI2C.h\:FLPROG_I2CSPEED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_I2CSPEED\~ 400000UL;}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogI2C.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 9}}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogI2C.h\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C.h}
{\xe \v src/i2c/flprogI2C.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include <Wire.h>}\par
00004 {\cf21 #include "flprogUtilites.h"}\par
00005 \par
00006 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00007 {\cf21 #define FLPROG_I2CSPEED 100000UL;}\par
00008 {\cf21 #else}\par
00009 {\cf21 #define FLPROG_I2CSPEED 400000UL;}\par
00010 {\cf21 #endif}\par
00011 \par
00012 {\cf21 #if defined(CORE_ESP32) || defined(CORE_STM32)}\par
00013 {\cf21 #define FLPROG_CAN_USE_I2C_1}\par
00014 {\cf21 #endif}\par
00015 \par
00016 {\cf17 class }FLProgI2C\par
00017 \{\par
00018 {\cf17 public}:\par
00019     FLProgI2C({\cf18 byte} busNumber = 0);\par
00020     {\cf17 virtual} {\cf18 bool} begin();\par
00021     {\cf18 bool} begin({\cf18 int} pinSDA, {\cf18 int} pinSCL);\par
00022     {\cf18 bool} findAddr(uint8_t addr);\par
00023     uint8_t getErrorCode() \{ {\cf19 return} codeErr; \};\par
00024     uint8_t fullWrite(uint8_t addr, uint8_t data);\par
00025     uint8_t fullWrite(uint8_t addr, {\cf17 const} uint8_t *data, uint8_t quantity);\par
00026     uint8_t fullRequestFrom(uint8_t address, uint8_t quantity);\par
00027     uint8_t fullRead(uint8_t addr, uint8_t *data, uint8_t quantity);\par
00028     uint8_t fullRead(uint8_t addr, uint16_t *data, uint8_t quantity);\par
00029     uint8_t fullRead(uint8_t addr, uint32_t *data, uint8_t quantity);\par
00030     uint8_t fullReadReg(uint8_t addr, uint8_t reg);\par
00031     uint8_t fullWriteReg(uint8_t addr, uint8_t reg, uint8_t value);\par
00032 \par
00033     {\cf17 virtual} {\cf18 void} beginTransmission(uint8_t addr);\par
00034     {\cf17 virtual} {\cf18 void} write({\cf17 const} uint8_t *data, uint8_t quantity);\par
00035     {\cf17 virtual} {\cf18 void} write(uint8_t data);\par
00036     {\cf17 virtual} uint8_t endTransmission();\par
00037     {\cf17 virtual} {\cf18 int} available();\par
00038     {\cf17 virtual} {\cf18 int} read();\par
00039     {\cf17 virtual} uint8_t requestFrom(uint8_t address, uint8_t quantity);\par
00040     {\cf17 virtual} uint8_t waitingForData(uint8_t count);\par
00041     {\cf17 virtual} {\cf18 void} setSpeed(uint32_t newSpeed);\par
00042     {\cf17 virtual} {\cf18 void} resetSpeedFrom(uint32_t newSpeed);\par
00043     {\cf17 virtual} {\cf18 bool} checkBus();\par
00044 \par
00045 {\cf17 protected}:\par
00046     uint8_t bus;\par
00047     {\cf18 bool} busy = {\cf17 false};\par
00048     uint8_t status = 0;\par
00049     uint8_t codeErr = 0;\par
00050     {\cf18 int} sda = -1;\par
00051     {\cf18 int} scl = -1;\par
00052     uint32_t speed = FLPROG_I2CSPEED;\par
00053     {\cf18 bool} beginWire0();\par
00054 {\cf21 #ifdef FLPROG_CAN_USE_I2C_1}\par
00055     {\cf18 bool} beginWire1();\par
00056 {\cf21 #endif}\par
00057 \};\par
00058 \par
00059 {\cf21 #include "flprogI2C_sensorsBasic.h"}\par
00060 \par
00061 {\cf17 class }FLProgTCA9548A\par
00062 \{\par
00063 {\cf17 public}:\par
00064     FLProgTCA9548A(FLProgI2C *device, uint8_t deviceAddress);\par
00065     FLProgTCA9548A(FLProgI2C *device);\par
00066     {\cf18 void} beginTransmission(uint8_t addr, uint8_t chanel);\par
00067     {\cf18 void} write({\cf17 const} uint8_t *data, uint8_t quantity, uint8_t chanel);\par
00068     {\cf18 void} write(uint8_t data, uint8_t chanel);\par
00069     uint8_t endTransmission();\par
00070     {\cf18 int} available(uint8_t chanel);\par
00071     {\cf18 int} read(uint8_t chanel);\par
00072     uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t chanel);\par
00073     {\cf18 void} setSpeed(uint32_t newSpeed, uint8_t chanel);\par
00074     {\cf18 void} resetSpeedFrom(uint32_t newSpeed, uint8_t chanel);\par
00075     {\cf18 bool} checkBus();\par
00076 \par
00077 {\cf17 private}:\par
00078     {\cf18 void} switchToChanel(uint8_t chanel);\par
00079     FLProgI2C *i2cDevice;\par
00080     uint8_t address;\par
00081     uint8_t currentChanel = 10;\par
00082     uint8_t errorCode = 0;\par
00083 \};\par
00084 \par
00085 {\cf17 class }FLProgVirtualI2C : {\cf17 public} FLProgI2C\par
00086 \{\par
00087 {\cf17 public}:\par
00088     FLProgVirtualI2C(FLProgTCA9548A *parentDevice, uint8_t chanelOnParent);\par
00089     {\cf17 virtual} {\cf18 bool} begin();\par
00090     {\cf17 virtual} {\cf18 void} beginTransmission(uint8_t addr);\par
00091     {\cf17 virtual} {\cf18 void} write({\cf17 const} uint8_t *data, uint8_t quantity);\par
00092     {\cf17 virtual} {\cf18 void} write(uint8_t data);\par
00093     {\cf17 virtual} uint8_t endTransmission();\par
00094     {\cf17 virtual} {\cf18 int} available();\par
00095     {\cf17 virtual} {\cf18 int} read();\par
00096     {\cf17 virtual} uint8_t requestFrom(uint8_t address, uint8_t quantity);\par
00097     {\cf17 virtual} {\cf18 void} setSpeed(uint32_t newSpeed);\par
00098     {\cf17 virtual} {\cf18 void} resetSpeedFrom(uint32_t newSpeed);\par
00099     {\cf17 virtual} {\cf18 bool} checkBus();\par
00100 \par
00101 {\cf17 private}:\par
00102     FLProgTCA9548A *parent;\par
00103     uint8_t chanel;\par
00104 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/i2c/flprogI2C_sensorsBasic.cpp\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C_sensorsBasic.cpp}
{\xe \v src/i2c/flprogI2C_sensorsBasic.cpp}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogI2C_sensorsBasic.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogI2C_sensorsBasic.cpp\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C_sensorsBasic.cpp}
{\xe \v src/i2c/flprogI2C_sensorsBasic.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogI2C_sensorsBasic.h"}\par
00002 \par
00003 {\cf18 void} FLProgI2cStepWorkSensor::checkDelay()\par
00004 \{\par
00005 \par
00006     {\cf19 if} (step == FLPROG_SENSOR_WAITING_DELAY)\par
00007     \{\par
00008         {\cf19 if} (flprog::isTimer(startDelay, sizeDelay))\par
00009         \{\par
00010             step = stepAfterDelay;\par
00011         \}\par
00012     \}\par
00013 \}\par
00014 \par
00015 {\cf18 void} FLProgI2cStepWorkSensor::read()\par
00016 \{\par
00017     isNeededRead = {\cf17 true};\par
00018 \}\par
00019 \par
00020 {\cf18 void} FLProgI2cStepWorkSensor::setReadPeriod(uint32_t period)\par
00021 \{\par
00022     readPeriod = period;\par
00023 \}\par
00024 \par
00025 {\cf18 void} FLProgI2cStepWorkSensor::checkReadPeriod()\par
00026 \{\par
00027     {\cf19 if} (readPeriod > 0)\par
00028     \{\par
00029         {\cf19 if} (flprog::isTimer(startReadPeriod, readPeriod))\par
00030         \{\par
00031             startReadPeriod = millis();\par
00032             read();\par
00033         \}\par
00034     \}\par
00035 \}\par
00036 \par
00037 {\cf18 void} FLProgI2cStepWorkSensor::gotoStepWithDelay(uint8_t newStep, uint32_t delay)\par
00038 \{\par
00039     startDelay = millis();\par
00040     sizeDelay = delay;\par
00041     stepAfterDelay = newStep;\par
00042     step = FLPROG_SENSOR_WAITING_DELAY;\par
00043 \}\par
00044 \par
00045 {\cf18 void} FLProgI2cStepWorkSensor::checkNeededRead()\par
00046 \{\par
00047     {\cf19 if} (step == FLPROG_SENSOR_WAITING_READ_STEP)\par
00048     \{\par
00049 \par
00050         {\cf19 if} (isNeededRead)\par
00051         \{\par
00052             readSensor();\par
00053             isNeededRead = {\cf17 false};\par
00054         \}\par
00055     \}\par
00056 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/i2c/flprogI2C_sensorsBasic.h\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C_sensorsBasic.h}
{\xe \v src/i2c/flprogI2C_sensorsBasic.h}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgI2cBasicSensor}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgI2cStepWorkSensor}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogI2C_sensorsBasic.h\par \pard\plain 
{\tc\tcl2 \v src/i2c/flprogI2C_sensorsBasic.h}
{\xe \v src/i2c/flprogI2C_sensorsBasic.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf17 class }FLProgI2cBasicSensor\par
00006 \{\par
00007 {\cf17 public}:\par
00008     uint8_t getError() \{ {\cf19 return} codeError; \};\par
00009 \par
00010 {\cf17 protected}:\par
00011     FLProgI2C *i2cDevice;\par
00012     uint8_t addres;\par
00013     uint32_t speed = FLPROG_I2CSPEED;\par
00014     uint8_t codeError = FLPROG_SENSOR_NOT_ERROR;\par
00015 \};\par
00016 \par
00017 {\cf17 class }FLProgI2cStepWorkSensor : {\cf17 public} FLProgI2cBasicSensor\par
00018 \{\par
00019 {\cf17 public}:\par
00020     {\cf18 void} read();\par
00021     {\cf18 void} setReadPeriod(uint32_t period);\par
00022 \par
00023 {\cf17 protected}:\par
00024     {\cf17 virtual} {\cf18 void} readSensor()\{\};\par
00025     {\cf18 void} checkDelay();\par
00026     {\cf18 void} checkReadPeriod();\par
00027     {\cf18 void} gotoStepWithDelay(uint8_t newStep, uint32_t delay);\par
00028     {\cf18 void} checkNeededRead();\par
00029     uint32_t startDelay;\par
00030     uint32_t sizeDelay;\par
00031     uint8_t stepAfterDelay;\par
00032     {\cf18 bool} isNeededRead = {\cf17 true};\par
00033     uint32_t readPeriod = 0;\par
00034     uint32_t startReadPeriod = 0;\par
00035     uint8_t step = FLPROG_SENSOR_WAITING_READ_STEP;\par
00036 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/tcp/flprogTcpDevice.cpp\par \pard\plain 
{\tc\tcl2 \v src/tcp/flprogTcpDevice.cpp}
{\xe \v src/tcp/flprogTcpDevice.cpp}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogTcpDevice.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogTcpDevice.cpp\par \pard\plain 
{\tc\tcl2 \v src/tcp/flprogTcpDevice.cpp}
{\xe \v src/tcp/flprogTcpDevice.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogTcpDevice.h"}\par
00002 {\cf20 //------------FLProgTcpDevice--------}\par
00003 {\cf18 void} FLProgTcpDevice::setPort({\cf18 int} port)\par
00004 \{\par
00005     {\cf19 if} (tcpPort == port)\par
00006         {\cf19 return};\par
00007     tcpPort = port;\par
00008     restart();\par
00009 \}\par
00010 \par
00011 {\cf18 void} FLProgTcpDevice::beClient()\par
00012 \{\par
00013     {\cf19 if} (!mode)\par
00014         {\cf19 return};\par
00015     mode = FLPROG_TSP_CLIENT_MODE;\par
00016     restart();\par
00017 \}\par
00018 \par
00019 {\cf18 void} FLProgTcpDevice::beServer()\par
00020 \{\par
00021     {\cf19 if} (mode)\par
00022         {\cf19 return};\par
00023     mode = FLPROG_TCP_SERVER_MODE;\par
00024     restart();\par
00025 \}\par
00026 \par
00027 {\cf18 void} FLProgTcpDevice::restart()\par
00028 \{\par
00029     stop();\par
00030     {\cf19 if} (mode && (hasServer()))\par
00031     \{\par
00032         begin();\par
00033     \}\par
00034 \}\par
00035 \par
00036 {\cf18 void} FLProgTcpDevice::stop()\par
00037 \{\par
00038     tcpClient()->stop();\par
00039 \}\par
00040 \par
00041 {\cf18 byte} FLProgTcpDevice::available()\par
00042 \{\par
00043     {\cf19 if} (!tcpClient()->connected())\par
00044     \{\par
00045         {\cf19 return} 0;\par
00046     \}\par
00047     {\cf19 return} tcpClient()->available();\par
00048 \}\par
00049 \par
00050 {\cf18 byte} FLProgTcpDevice::read()\par
00051 \{\par
00052 \par
00053     {\cf19 return} tcpClient()->read();\par
00054 \}\par
00055 \par
00056 {\cf18 bool} FLProgTcpDevice::connected()\par
00057 \{\par
00058     {\cf19 return} tcpClient()->connected();\par
00059 \}\par
00060 \par
00061 {\cf18 void} FLProgTcpDevice::print(String data)\par
00062 \{\par
00063     tcpClient()->print(data);\par
00064 \}\par
00065 \par
00066 {\cf18 byte} FLProgTcpDevice::write({\cf18 byte} buffer[], {\cf18 byte} size)\par
00067 \{\par
00068     {\cf19 return} tcpClient()->write(buffer, size);\par
00069 \}\par
00070 \par
00071 {\cf18 void} FLProgTcpDevice::connect(uint16_t ipFirst, uint16_t ipSecond, uint16_t ipThird, uint16_t ipFourth, {\cf18 int} newPort)\par
00072 \{\par
00073     workIp[0] = ipFirst;\par
00074     workIp[1] = ipSecond;\par
00075     workIp[2] = ipThird;\par
00076     workIp[3] = ipFourth;\par
00077 \par
00078     connect(workIp, newPort);\par
00079 \}\par
00080 \par
00081 {\cf18 void} FLProgTcpDevice::connect(IPAddress newIp, {\cf18 int} newPort)\par
00082 \{\par
00083     {\cf19 if} (mode)\par
00084     \{\par
00085         {\cf19 if} (!tcpClient()->connected())\par
00086         \{\par
00087             setAvalibleClientFromServer();\par
00088             {\cf19 return};\par
00089         \}\par
00090         {\cf19 return};\par
00091     \}\par
00092     {\cf19 if} (tcpClient()->connected())\par
00093     \{\par
00094         {\cf19 if} (clientRemoteIp() == newIp)\par
00095         \{\par
00096             {\cf19 if} (clientRemotePort() == newPort)\par
00097             \{\par
00098                 {\cf19 return};\par
00099             \}\par
00100         \}\par
00101     \}\par
00102     stop();\par
00103     tcpClient()->connect(newIp, newPort);\par
00104 \}\par
00105 \par
00106 {\cf20 //----------FLProgW5100TcpDevice--------}\par
00107 {\cf21 #ifndef FLPROG_CORE_ESP8266_OR_ESP32}\par
00108 {\cf18 void} FLProgW5100TcpDevice::begin()\par
00109 \{\par
00110     {\cf19 if} (mode)\par
00111     \{\par
00112         server = {\cf17 new} EthernetServer(tcpPort);\par
00113         server->begin();\par
00114     \}\par
00115 \}\par
00116 \par
00117 {\cf18 void} FLProgW5100TcpDevice::setAvalibleClientFromServer()\par
00118 \{\par
00119     {\cf19 if} (server == 0)\par
00120         {\cf19 return};\par
00121     client = server->available();\par
00122 \}\par
00123 \par
00124 {\cf21 #endif}\par
00125 \par
00126 {\cf20 //-------------FLProgWiFiTcpDevice-----------}\par
00127 {\cf21 #ifdef FLPROG_CORE_ESP8266_OR_ESP32}\par
00128 {\cf18 void} FLProgWiFiTcpDevice::begin()\par
00129 \{\par
00130     {\cf19 if} (mode)\par
00131     \{\par
00132         server = {\cf17 new} WiFiServer(tcpPort);\par
00133         server->begin();\par
00134     \}\par
00135 \}\par
00136 \par
00137 {\cf18 void} FLProgWiFiTcpDevice::setAvalibleClientFromServer()\par
00138 \{\par
00139     {\cf19 if} (server == 0)\par
00140         {\cf19 return};\par
00141     client = server->available();\par
00142 \}\par
00143 \par
00144 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/tcp/flprogTcpDevice.h\par \pard\plain 
{\tc\tcl2 \v src/tcp/flprogTcpDevice.h}
{\xe \v src/tcp/flprogTcpDevice.h}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "./flprogUtilites.h"}\par
{\f2 #include "Ethernet.h"}\par
{\f2 #include "SPI.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgTcpDevice}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgW5100TcpDevice}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_TCP_SERVER_MODE}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_TSP_CLIENT_MODE}\~ 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 
{\xe \v FLPROG_TCP_SERVER_MODE\:flprogTcpDevice.h}
{\xe \v flprogTcpDevice.h\:FLPROG_TCP_SERVER_MODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_TCP_SERVER_MODE\~ 1}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 14}}\par
}
{\xe \v FLPROG_TSP_CLIENT_MODE\:flprogTcpDevice.h}
{\xe \v flprogTcpDevice.h\:FLPROG_TSP_CLIENT_MODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_TSP_CLIENT_MODE\~ 0}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogTcpDevice.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 15}}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogTcpDevice.h\par \pard\plain 
{\tc\tcl2 \v src/tcp/flprogTcpDevice.h}
{\xe \v src/tcp/flprogTcpDevice.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "./flprogUtilites.h"}\par
00004 {\cf21 #ifndef FLPROG_CORE_ESP8266_OR_ESP32}\par
00005 {\cf21 #include "Ethernet.h"}\par
00006 {\cf21 #include "SPI.h"}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #ifdef ESP8266}\par
00009 {\cf21 #include <ESP8266WiFi.h>}\par
00010 {\cf21 #endif}\par
00011 {\cf21 #ifdef ESP32}\par
00012 {\cf21 #include "WiFi.h"}\par
00013 {\cf21 #endif}\par
00014 {\cf21 #define FLPROG_TCP_SERVER_MODE 1}\par
00015 {\cf21 #define FLPROG_TSP_CLIENT_MODE 0}\par
00016 \par
00017 {\cf17 class }FLProgTcpDevice\par
00018 \{\par
00019 {\cf17 public}:\par
00020     {\cf18 void} beClient();\par
00021     {\cf18 void} beServer();\par
00022     {\cf18 byte} available();\par
00023     {\cf18 byte} read();\par
00024     {\cf18 void} setPort({\cf18 int} port);\par
00025     {\cf18 bool} connected();\par
00026     {\cf18 void} connect() \{ connect(0, 0, 0, 0); \};\par
00027     {\cf18 void} connect({\cf18 byte} ipFirst, {\cf18 byte} ipSecond, {\cf18 byte} ipThird, {\cf18 byte} ipFourth) \{ connect(ipFirst, ipSecond, ipThird, ipFourth, tcpPort); \};\par
00028     {\cf17 virtual} {\cf18 void} connect(uint16_t ipFirst, uint16_t ipSecond, uint16_t ipThird, uint16_t ipFourth, {\cf18 int} newPort);\par
00029     {\cf17 virtual} {\cf18 void} connect(IPAddress newIp, {\cf18 int} newPort);\par
00030     {\cf18 void} print(String data);\par
00031     {\cf18 byte} write({\cf18 byte} buffer[], {\cf18 byte} size);\par
00032     {\cf17 virtual} {\cf18 void} begin()\{\};\par
00033     {\cf18 void} restart();\par
00034     {\cf18 void} stop();\par
00035     {\cf17 virtual} {\cf18 bool} hasClient() \{ {\cf19 return} {\cf17 false}; \};\par
00036     {\cf17 virtual} {\cf18 bool} hasServer() \{ {\cf19 return} {\cf17 false}; \};\par
00037 \par
00038 {\cf17 protected}:\par
00039     {\cf18 bool} mode = FLPROG_TSP_CLIENT_MODE;\par
00040     {\cf18 int} tcpPort = 502;\par
00041     {\cf17 virtual} Client *tcpClient() \{ {\cf19 return} 0; \};\par
00042     {\cf17 virtual} {\cf18 void} setAvalibleClientFromServer()\{\};\par
00043     {\cf17 virtual} IPAddress clientRemoteIp() \{ {\cf19 return} IPAddress(0, 0, 0, 0); \};\par
00044     {\cf17 virtual} {\cf18 int} clientRemotePort() \{ {\cf19 return} 0; \};\par
00045     IPAddress workIp;\par
00046 \par
00047 {\cf17 private}:\par
00048 \};\par
00049 \par
00050 {\cf21 #ifndef FLPROG_CORE_ESP8266_OR_ESP32}\par
00051 {\cf17 class }FLProgW5100TcpDevice : {\cf17 public} FLProgTcpDevice\par
00052 \{\par
00053 {\cf17 public}:\par
00054     {\cf17 virtual} {\cf18 void} begin();\par
00055     {\cf17 virtual} {\cf18 bool} hasClient() \{ {\cf19 return} client; \};\par
00056     {\cf17 virtual} {\cf18 bool} hasServer() \{ {\cf19 return} server != 0; \};\par
00057 \par
00058 {\cf17 protected}:\par
00059     {\cf17 virtual} Client *tcpClient() \{ {\cf19 return} &client; \};\par
00060     {\cf17 virtual} {\cf18 void} setAvalibleClientFromServer();\par
00061     {\cf17 virtual} IPAddress clientRemoteIp() \{ {\cf19 return} client.remoteIP(); \};\par
00062     {\cf17 virtual} {\cf18 int} clientRemotePort() \{ {\cf19 return} client.remotePort(); \};\par
00063 \par
00064 \par
00065 {\cf17 private}:\par
00066     EthernetServer *server;\par
00067     EthernetClient client;\par
00068 \};\par
00069 {\cf21 #endif}\par
00070 \par
00071 {\cf21 #ifdef FLPROG_CORE_ESP8266_OR_ESP32}\par
00072 {\cf17 class }FLProgWiFiTcpDevice : {\cf17 public} FLProgTcpDevice\par
00073 \{\par
00074 {\cf17 public}:\par
00075     {\cf17 virtual} {\cf18 void} begin();\par
00076     {\cf17 virtual} {\cf18 bool} hasClient() \{ {\cf19 return} client; \};\par
00077     {\cf17 virtual} {\cf18 bool} hasServer() \{ {\cf19 return} server != 0; \};\par
00078 \par
00079 {\cf17 protected}:\par
00080     {\cf17 virtual} Client *tcpClient() \{ {\cf19 return} &client; \};\par
00081     {\cf17 virtual} {\cf18 void} setAvalibleClientFromServer();\par
00082     {\cf17 virtual} IPAddress clientRemoteIp() \{ {\cf19 return} client.remoteIP(); \};\par
00083     {\cf17 virtual} {\cf18 int} clientRemotePort() \{ {\cf19 return} client.remotePort(); \};\par
00084 \par
00085 {\cf17 private}:\par
00086     WiFiServer *server;\par
00087     WiFiClient client;\par
00088 \};\par
00089 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/bluetoothSerial/flprogUartBluetoothSerial.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.cpp}
{\xe \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.cpp}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUartBluetoothSerial.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUartBluetoothSerial.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.cpp}
{\xe \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUartBluetoothSerial.h"}\par
00002 {\cf21 #ifdef FLPROG_CAN_USE_BLUETOOTH_SERIAL}\par
00003 \par
00004 FLProgBluetoothUart::FLProgBluetoothUart(String name)\par
00005 \{\par
00006     bluetoothPort = {\cf17 new} BluetoothSerial();\par
00007     deviceName = name;\par
00008 \}\par
00009 \par
00010 {\cf18 void} FLProgBluetoothUart::beBluetoothMaster()\par
00011 \{\par
00012     {\cf19 if} (isMaster)\par
00013     \{\par
00014         {\cf19 return};\par
00015     \}\par
00016     isMaster = {\cf17 true};\par
00017     restartPort();\par
00018 \}\par
00019 \par
00020 {\cf18 void} FLProgBluetoothUart::beBluetoothSlave()\par
00021 \{\par
00022     {\cf19 if} (!isMaster)\par
00023     \{\par
00024         {\cf19 return};\par
00025     \}\par
00026     isMaster = {\cf17 false};\par
00027     restartPort();\par
00028 \}\par
00029 \par
00030 {\cf18 void} FLProgBluetoothUart::setDeviceName(String name)\par
00031 \{\par
00032     {\cf19 if} (deviceName.equals(name))\par
00033     \{\par
00034         {\cf19 return};\par
00035     \}\par
00036     deviceName = name;\par
00037     restartPort();\par
00038 \}\par
00039 \par
00040 {\cf18 void} FLProgBluetoothUart::setPartnerName(String name)\par
00041 \{\par
00042     {\cf19 if} (partnerName.equals(name))\par
00043     \{\par
00044         {\cf19 return};\par
00045     \}\par
00046     partnerName = name;\par
00047     restartPort();\par
00048 \}\par
00049 \par
00050 {\cf18 bool} FLProgBluetoothUart::hasPort()\par
00051 \{\par
00052     {\cf19 return} !(bluetoothPort == 0);\par
00053 \}\par
00054 \par
00055 {\cf18 void} FLProgBluetoothUart::restartPort()\par
00056 \{\par
00057     bluetoothPort->end();\par
00058     begin();\par
00059 \}\par
00060 \par
00061 {\cf18 void} FLProgBluetoothUart::begin()\par
00062 \{\par
00063     bluetoothPort->begin(deviceName);\par
00064     {\cf19 if} (isMaster)\par
00065     \{\par
00066         bluetoothPort->connect(partnerName);\par
00067     \}\par
00068     {\cf19 return};\par
00069 \}\par
00070 \par
00071 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/bluetoothSerial/flprogUartBluetoothSerial.h\par \pard\plain 
{\tc\tcl2 \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.h}
{\xe \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.h}
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUartBluetoothSerial.h\par \pard\plain 
{\tc\tcl2 \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.h}
{\xe \v src/uart/bluetoothSerial/flprogUartBluetoothSerial.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CAN_USE_BLUETOOTH_SERIAL}\par
00006 \par
00007 {\cf21 #include "BluetoothSerial.h"}\par
00008 \par
00009 {\cf17 class }FLProgBluetoothUart : {\cf17 public} FLProgUartBasic\par
00010 \{\par
00011 {\cf17 public}:\par
00012     FLProgBluetoothUart(String name);\par
00013     {\cf18 void} setDeviceName(String name);\par
00014     {\cf18 void} setPartnerName(String name);\par
00015     {\cf18 void} beBluetoothMaster();\par
00016     {\cf18 void} beBluetoothSlave();\par
00017     {\cf17 virtual} {\cf18 bool} hasPort();\par
00018     {\cf17 virtual} {\cf18 void} restartPort();\par
00019     {\cf17 virtual} {\cf18 void} begin();\par
00020 \par
00021 {\cf17 protected}:\par
00022     BluetoothSerial *bluetoothPort;\par
00023     String deviceName;\par
00024     String partnerName;\par
00025     {\cf18 bool} isMaster = {\cf17 false};\par
00026     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} bluetoothPort; \};\par
00027 \};\par
00028 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/flprogUart.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/flprogUart.cpp}
{\xe \v src/uart/flprogUart.cpp}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUart.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUart.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/flprogUart.cpp}
{\xe \v src/uart/flprogUart.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUart.h"}\par
00002 \par
00003 {\cf18 void} FLProgUartBasic::setPortSpeed({\cf18 byte} speed)\par
00004 \{\par
00005     {\cf19 if} (portSpeed == speed)\par
00006     \{\par
00007         {\cf19 return};\par
00008     \}\par
00009     portSpeed = speed;\par
00010     {\cf19 if} (!hasPort())\par
00011     \{\par
00012         {\cf19 return};\par
00013     \}\par
00014     restartPort();\par
00015 \}\par
00016 \par
00017 {\cf18 void} FLProgUartBasic::setPortDataBits({\cf18 byte} dataBits)\par
00018 \{\par
00019     {\cf19 if} ((dataBits < 5) || (dataBits > 8))\par
00020     \{\par
00021         {\cf19 return};\par
00022     \}\par
00023     {\cf19 if} (portDataBits == dataBits)\par
00024     \{\par
00025         {\cf19 return};\par
00026     \}\par
00027     portDataBits = dataBits;\par
00028     {\cf19 if} (!hasPort())\par
00029     \{\par
00030         {\cf19 return};\par
00031     \}\par
00032     restartPort();\par
00033 \}\par
00034 \par
00035 {\cf18 void} FLProgUartBasic::setPortStopBits({\cf18 byte} stopBits)\par
00036 \{\par
00037     {\cf19 if} ((stopBits < 1) || (stopBits > 2))\par
00038     \{\par
00039         {\cf19 return};\par
00040     \}\par
00041 \par
00042     {\cf19 if} (portStopBits == stopBits)\par
00043     \{\par
00044         {\cf19 return};\par
00045     \}\par
00046     portStopBits = stopBits;\par
00047     {\cf19 if} (!hasPort())\par
00048     \{\par
00049         {\cf19 return};\par
00050     \}\par
00051     restartPort();\par
00052 \}\par
00053 \par
00054 {\cf18 void} FLProgUartBasic::setPortParity({\cf18 byte} parity)\par
00055 \{\par
00056     {\cf19 if} ((parity < 0) || (parity > 2))\par
00057     \{\par
00058         {\cf19 return};\par
00059     \}\par
00060 \par
00061     {\cf19 if} (portParity == parity)\par
00062     \{\par
00063         {\cf19 return};\par
00064     \}\par
00065     portParity = parity;\par
00066     {\cf19 if} (!hasPort())\par
00067     \{\par
00068         {\cf19 return};\par
00069     \}\par
00070     restartPort();\par
00071 \}\par
00072 \par
00073 {\cf18 int} FLProgUartBasic::serialCodeForParametrs()\par
00074 \{\par
00075     {\cf18 int} code = 0;\par
00076     {\cf19 if} (portStopBits == 2)\par
00077     \{\par
00078         code = code + 8;\par
00079     \}\par
00080     {\cf19 if} (portDataBits == 6)\par
00081     \{\par
00082         code = code + 2;\par
00083     \}\par
00084     {\cf19 if} (portDataBits == 7)\par
00085     \{\par
00086         code = code + 4;\par
00087     \}\par
00088     {\cf19 if} (portDataBits == 8)\par
00089     \{\par
00090         code = code + 6;\par
00091     \}\par
00092     {\cf19 if} (portParity == 1)\par
00093     \{\par
00094         code = code + 32;\par
00095     \}\par
00096     {\cf19 if} (portParity == 2)\par
00097     \{\par
00098         code = code + 48;\par
00099     \}\par
00100     {\cf19 return} code;\par
00101 \}\par
00102 \par
00103 uint32_t FLProgUartBasic::speedFromCode()\par
00104 \{\par
00105     {\cf19 return} flprog::speedFromCode(portSpeed);\par
00106 \}\par
00107 \par
00108 {\cf18 void} FLProgUartBasic::setCodeFromSpeed(int32_t speed)\par
00109 \{\par
00110     portSpeed = flprog::codeFromSpeed(speed);\par
00111 \}\par
00112 \par
00113 {\cf18 void} FLProgUartBasic::begin(int32_t speed)\par
00114 \{\par
00115     setCodeFromSpeed(speed);\par
00116     begin();\par
00117 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/flprogUart.h\par \pard\plain 
{\tc\tcl2 \v src/uart/flprogUart.h}
{\xe \v src/uart/flprogUart.h}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
{\f2 #include "softwareUart\\flprogSoftwareUart.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FLProgUartBasic}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_CAN_USE_SOFTWARE_SERIAL}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_HARDWARE_UART}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_USB_UART}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_300}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_600}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_1200}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_2400}\~ 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_4800}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_9600}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_14400}\~ 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_19200}\~ 7\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_28800}\~ 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_38400}\~ 9\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_57600}\~ 10\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_SPEED_115200}\~ 11\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_STOP_BITS_1}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_STOP_BITS_2}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_DATA_BITS_5}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_DATA_BITS_6}\~ 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_DATA_BITS_7}\~ 7\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_DATA_BITS_8}\~ 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_PARITY_NONE}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_PARITY_EVEN}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FLPROG_PORT_PARITY_ODD}\~ 2\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E0\'EA\'F0\'EE\'F1\'FB\par
\pard\plain 
{\xe \v FLPROG_CAN_USE_SOFTWARE_SERIAL\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_CAN_USE_SOFTWARE_SERIAL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_CAN_USE_SOFTWARE_SERIAL}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 8}}\par
}
{\xe \v FLPROG_HARDWARE_UART\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_HARDWARE_UART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_HARDWARE_UART\~ 0}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 17}}\par
}
{\xe \v FLPROG_PORT_DATA_BITS_5\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_DATA_BITS_5}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_DATA_BITS_5\~ 5}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 36}}\par
}
{\xe \v FLPROG_PORT_DATA_BITS_6\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_DATA_BITS_6}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_DATA_BITS_6\~ 6}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 37}}\par
}
{\xe \v FLPROG_PORT_DATA_BITS_7\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_DATA_BITS_7}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_DATA_BITS_7\~ 7}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 38}}\par
}
{\xe \v FLPROG_PORT_DATA_BITS_8\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_DATA_BITS_8}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_DATA_BITS_8\~ 8}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 39}}\par
}
{\xe \v FLPROG_PORT_PARITY_EVEN\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_PARITY_EVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_PARITY_EVEN\~ 1}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 42}}\par
}
{\xe \v FLPROG_PORT_PARITY_NONE\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_PARITY_NONE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_PARITY_NONE\~ 0}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 41}}\par
}
{\xe \v FLPROG_PORT_PARITY_ODD\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_PARITY_ODD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_PARITY_ODD\~ 2}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 43}}\par
}
{\xe \v FLPROG_PORT_STOP_BITS_1\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_STOP_BITS_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_STOP_BITS_1\~ 1}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 33}}\par
}
{\xe \v FLPROG_PORT_STOP_BITS_2\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_PORT_STOP_BITS_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_PORT_STOP_BITS_2\~ 2}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 34}}\par
}
{\xe \v FLPROG_SPEED_115200\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_115200}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_115200\~ 11}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 31}}\par
}
{\xe \v FLPROG_SPEED_1200\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_1200}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_1200\~ 2}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 22}}\par
}
{\xe \v FLPROG_SPEED_14400\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_14400}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_14400\~ 6}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 26}}\par
}
{\xe \v FLPROG_SPEED_19200\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_19200}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_19200\~ 7}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 27}}\par
}
{\xe \v FLPROG_SPEED_2400\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_2400}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_2400\~ 3}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 23}}\par
}
{\xe \v FLPROG_SPEED_28800\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_28800}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_28800\~ 8}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 28}}\par
}
{\xe \v FLPROG_SPEED_300\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_300}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_300\~ 0}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 20}}\par
}
{\xe \v FLPROG_SPEED_38400\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_38400}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_38400\~ 9}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 29}}\par
}
{\xe \v FLPROG_SPEED_4800\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_4800}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_4800\~ 4}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 24}}\par
}
{\xe \v FLPROG_SPEED_57600\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_57600}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_57600\~ 10}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 30}}\par
}
{\xe \v FLPROG_SPEED_600\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_600}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_600\~ 1}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 21}}\par
}
{\xe \v FLPROG_SPEED_9600\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_SPEED_9600}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_SPEED_9600\~ 5}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 25}}\par
}
{\xe \v FLPROG_USB_UART\:flprogUart.h}
{\xe \v flprogUart.h\:FLPROG_USB_UART}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FLPROG_USB_UART\~ 1}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D1\'EC. \'EE\'EF\'F0\'E5\'E4\'E5\'EB\'E5\'ED\'E8\'E5 \'E2 \'F4\'E0\'E9\'EB\'E5 {\b flprogUart.h} \'F1\'F2\'F0\'EE\'EA\'E0 {\b 18}}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUart.h\par \pard\plain 
{\tc\tcl2 \v src/uart/flprogUart.h}
{\xe \v src/uart/flprogUart.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifndef FLPROG_CORE_ESP32}\par
00006 {\cf21 #ifndef FLPROG_CORE_AVR_DUE}\par
00007 {\cf21 #ifndef FLPROG_CORE_STM}\par
00008 {\cf21 #define FLPROG_CAN_USE_SOFTWARE_SERIAL}\par
00009 {\cf21 #endif}\par
00010 {\cf21 #endif}\par
00011 {\cf21 #endif}\par
00012 \par
00013 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00014 {\cf21 #define FLPROG_CAN_USE_BLUETOOTH_SERIAL}\par
00015 {\cf21 #endif}\par
00016 \par
00017 {\cf21 #define FLPROG_HARDWARE_UART 0}\par
00018 {\cf21 #define FLPROG_USB_UART 1}\par
00019 \par
00020 {\cf21 #define FLPROG_SPEED_300 0}\par
00021 {\cf21 #define FLPROG_SPEED_600 1}\par
00022 {\cf21 #define FLPROG_SPEED_1200 2}\par
00023 {\cf21 #define FLPROG_SPEED_2400 3}\par
00024 {\cf21 #define FLPROG_SPEED_4800 4}\par
00025 {\cf21 #define FLPROG_SPEED_9600 5}\par
00026 {\cf21 #define FLPROG_SPEED_14400 6}\par
00027 {\cf21 #define FLPROG_SPEED_19200 7}\par
00028 {\cf21 #define FLPROG_SPEED_28800 8}\par
00029 {\cf21 #define FLPROG_SPEED_38400 9}\par
00030 {\cf21 #define FLPROG_SPEED_57600 10}\par
00031 {\cf21 #define FLPROG_SPEED_115200 11}\par
00032 \par
00033 {\cf21 #define FLPROG_PORT_STOP_BITS_1 1}\par
00034 {\cf21 #define FLPROG_PORT_STOP_BITS_2 2}\par
00035 \par
00036 {\cf21 #define FLPROG_PORT_DATA_BITS_5 5}\par
00037 {\cf21 #define FLPROG_PORT_DATA_BITS_6 6}\par
00038 {\cf21 #define FLPROG_PORT_DATA_BITS_7 7}\par
00039 {\cf21 #define FLPROG_PORT_DATA_BITS_8 8}\par
00040 \par
00041 {\cf21 #define FLPROG_PORT_PARITY_NONE 0}\par
00042 {\cf21 #define FLPROG_PORT_PARITY_EVEN 1}\par
00043 {\cf21 #define FLPROG_PORT_PARITY_ODD 2}\par
00044 \par
00045 {\cf17 class }FLProgUartBasic\par
00046 \{\par
00047 {\cf17 public}:\par
00048     {\cf17 virtual} {\cf18 void} begin()\{\};\par
00049     {\cf18 void} begin(int32_t speed);\par
00050     {\cf18 byte} getPortSpeed() \{ {\cf19 return} portSpeed; \};\par
00051     {\cf18 byte} getPortDataBits() \{ {\cf19 return} portDataBits; \};\par
00052     {\cf18 byte} getPortStopBits() \{ {\cf19 return} portStopBits; \};\par
00053     {\cf18 byte} getPortParity() \{ {\cf19 return} portParity; \};\par
00054     {\cf17 virtual} {\cf18 bool} hasPort() \{ {\cf19 return} {\cf17 false}; \};\par
00055     {\cf17 virtual} {\cf18 void} restartPort()\{\};\par
00056     {\cf18 void} setPortSpeed({\cf18 byte} speed);\par
00057     {\cf18 void} setPortDataBits({\cf18 byte} dataBits);\par
00058     {\cf18 void} setPortStopBits({\cf18 byte} stopBits);\par
00059     {\cf18 void} setPortParity({\cf18 byte} parity);\par
00060     {\cf18 byte} available() \{ {\cf19 return} uartPort()->available(); \};\par
00061     {\cf18 byte} read() \{ {\cf19 return} uartPort()->read(); \};\par
00062     {\cf18 byte} write({\cf18 byte} *buffer, {\cf18 byte} size) \{ {\cf19 return} uartPort()->write(buffer, size); \};\par
00063 \par
00064     {\cf18 void} print(String str) \{ uartPort()->print(str); \};\par
00065     {\cf18 void} print({\cf17 const} {\cf18 char} str[]) \{ uartPort()->print(str); \};\par
00066     {\cf18 void} print({\cf18 char} str) \{ uartPort()->print(str); \};\par
00067     {\cf18 void} print({\cf18 byte} val, {\cf18 int} mode = DEC) \{ uartPort()->print(val, mode); \};\par
00068     {\cf18 void} print({\cf18 int} val, {\cf18 int} mode = DEC) \{ uartPort()->print(val, mode); \};\par
00069     {\cf18 void} print({\cf18 long} val, {\cf18 int} mode = DEC) \{ uartPort()->print(val, mode); \};\par
00070     {\cf18 void} print({\cf18 unsigned} {\cf18 long} val, {\cf18 int} mode = DEC) \{ uartPort()->print(val, mode); \};\par
00071     {\cf18 void} print({\cf18 float} val, {\cf18 int} mode = 2) \{ uartPort()->print(val, mode); \};\par
00072     {\cf18 void} println(String str) \{ uartPort()->println(str); \};\par
00073     {\cf18 void} println({\cf18 char} str) \{ uartPort()->println(str); \};\par
00074     {\cf18 void} println({\cf17 const} {\cf18 char} str[]) \{ uartPort()->println(str); \};\par
00075     {\cf18 void} println({\cf18 byte} val, {\cf18 int} mode = DEC) \{ uartPort()->println(val, mode); \};\par
00076     {\cf18 void} println({\cf18 int} val, {\cf18 int} mode = DEC) \{ uartPort()->println(val, mode); \};\par
00077     {\cf18 void} println({\cf18 long} val, {\cf18 int} mode = DEC) \{ uartPort()->println(val, mode); \};\par
00078     {\cf18 void} println({\cf18 unsigned} {\cf18 long} val, {\cf18 int} mode = DEC) \{ uartPort()->println(val, mode); \};\par
00079     {\cf18 void} println({\cf18 float} val, {\cf18 int} mode = 2) \{ uartPort()->println(val, mode); \};\par
00080     {\cf18 void} println() \{ uartPort()->println(); \};\par
00081 \par
00082 {\cf17 protected}:\par
00083     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} 0; \};\par
00084     uint32_t speedFromCode();\par
00085     {\cf18 int} serialCodeForParametrs();\par
00086     {\cf18 void} setCodeFromSpeed(int32_t speed);\par
00087     {\cf18 byte} portSpeed = FLPROG_SPEED_9600;\par
00088     {\cf18 byte} portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00089     {\cf18 byte} portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00090     {\cf18 byte} portParity = FLPROG_PORT_PARITY_NONE;\par
00091 \};\par
00092 \par
00093 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00094 {\cf21 #include "hardwareUart\\hardwareUartESP8266\\hardwareUartESP8266.h"}\par
00095 {\cf21 #endif}\par
00096 \par
00097 {\cf21 #ifdef FLPROG_CORE_AVR_DUE}\par
00098 {\cf21 #include "hardwareUart\\hardwareUartDUE\\hardwareUartDUE.h"}\par
00099 {\cf21 #endif}\par
00100 \par
00101 {\cf21 #ifdef FLPROG_CORE_AVR}\par
00102 {\cf21 #include "hardwareUart\\hardwareUartAVR\\hardwareUartAVR.h"}\par
00103 {\cf21 #endif}\par
00104 \par
00105 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00106 {\cf21 #include "hardwareUart\\hardwareUartESP32\\hardwareUartESP32.h"}\par
00107 {\cf21 #endif}\par
00108 \par
00109 {\cf21 #ifdef FLPROG_CORE_STM}\par
00110 {\cf21 #include "hardwareUart\\hardwareUartSTM\\hardwareUartSTM.h"}\par
00111 {\cf21 #endif}\par
00112 \par
00113 {\cf21 #ifdef FLPROG_CAN_USE_BLUETOOTH_SERIAL}\par
00114 {\cf21 #include "bluetoothSerial\\flprogUartBluetoothSerial.h"}\par
00115 {\cf21 #endif}\par
00116 \par
00117 {\cf21 #ifdef FLPROG_CAN_USE_SOFTWARE_SERIAL}\par
00118 {\cf21 #include "softwareUart\\flprogSoftwareUart.h"}\par
00119 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.cpp}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "hardwareUartAVR.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartAVR.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.cpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "hardwareUartAVR.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_AVR}\par
00004 FLProgUart::FLProgUart(HardwareSerial *hardwarePort)\par
00005 \{\par
00006     port = hardwarePort;\par
00007 \}\par
00008 \par
00009 {\cf18 void} FLProgUart::restartPort()\par
00010 \{\par
00011     port->end();\par
00012     begin();\par
00013 \}\par
00014 \par
00015 {\cf18 void} FLProgUart::begin()\par
00016 \{\par
00017     port->begin(speedFromCode(), serialModeFromParametrs());\par
00018 \}\par
00019 \par
00020 {\cf18 void} FLProgUart::begin(int32_t speed, {\cf18 int} mode)\par
00021 \{\par
00022     setCodeFromSpeed(speed);\par
00023     setSerialMode(mode);\par
00024     begin();\par
00025 \}\par
00026 \par
00027 {\cf18 int} FLProgUart::serialModeFromParametrs()\par
00028 \{\par
00029     {\cf19 return} flprog::serialModeFromInt(serialCodeForParametrs());\par
00030 \}\par
00031 \par
00032 {\cf18 void} FLProgUart::setSerialMode(int16_t mode)\par
00033 \{\par
00034     {\cf19 switch} (mode)\par
00035     \{\par
00036     {\cf19 case} 0x00:\par
00037         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00038         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00039         portParity = FLPROG_PORT_PARITY_NONE;\par
00040         {\cf19 return};\par
00041         {\cf19 break};\par
00042     {\cf19 case} 0x02:\par
00043         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00044         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00045         portParity = FLPROG_PORT_PARITY_NONE;\par
00046         {\cf19 return};\par
00047         {\cf19 break};\par
00048     {\cf19 case} 0x04:\par
00049         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00050         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00051         portParity = FLPROG_PORT_PARITY_NONE;\par
00052         {\cf19 return};\par
00053         {\cf19 break};\par
00054     {\cf19 case} 0x06:\par
00055         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00056         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00057         portParity = FLPROG_PORT_PARITY_NONE;\par
00058         {\cf19 return};\par
00059         {\cf19 break};\par
00060     {\cf19 case} 0x08:\par
00061         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00062         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00063         portParity = FLPROG_PORT_PARITY_NONE;\par
00064         {\cf19 return};\par
00065         {\cf19 break};\par
00066     {\cf19 case} 0x0A:\par
00067         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00068         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00069         portParity = FLPROG_PORT_PARITY_NONE;\par
00070         {\cf19 return};\par
00071         {\cf19 break};\par
00072     {\cf19 case} 0x0C:\par
00073         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00074         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00075         portParity = FLPROG_PORT_PARITY_NONE;\par
00076         {\cf19 return};\par
00077         {\cf19 break};\par
00078     {\cf19 case} 0x0E:\par
00079         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00080         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00081         portParity = FLPROG_PORT_PARITY_NONE;\par
00082         {\cf19 return};\par
00083         {\cf19 break};\par
00084     {\cf19 case} 0x20:\par
00085         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00086         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00087         portParity = FLPROG_PORT_PARITY_EVEN;\par
00088         {\cf19 return};\par
00089         {\cf19 break};\par
00090     {\cf19 case} 0x22:\par
00091         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00092         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00093         portParity = FLPROG_PORT_PARITY_EVEN;\par
00094         {\cf19 return};\par
00095         {\cf19 break};\par
00096     {\cf19 case} 0x24:\par
00097         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00098         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00099         portParity = FLPROG_PORT_PARITY_EVEN;\par
00100         {\cf19 return};\par
00101         {\cf19 break};\par
00102     {\cf19 case} 0x26:\par
00103         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00104         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00105         portParity = FLPROG_PORT_PARITY_EVEN;\par
00106         {\cf19 return};\par
00107         {\cf19 break};\par
00108     {\cf19 case} 0x28:\par
00109         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00110         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00111         portParity = FLPROG_PORT_PARITY_EVEN;\par
00112         {\cf19 return};\par
00113         {\cf19 break};\par
00114     {\cf19 case} 0x2A:\par
00115         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00116         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00117         portParity = FLPROG_PORT_PARITY_EVEN;\par
00118         {\cf19 return};\par
00119         {\cf19 break};\par
00120     {\cf19 case} 0x2C:\par
00121         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00122         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00123         portParity = FLPROG_PORT_PARITY_EVEN;\par
00124         {\cf19 return};\par
00125         {\cf19 break};\par
00126     {\cf19 case} 0x2E:\par
00127         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00128         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00129         portParity = FLPROG_PORT_PARITY_EVEN;\par
00130         {\cf19 return};\par
00131         {\cf19 break};\par
00132     {\cf19 case} 0x30:\par
00133         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00134         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00135         portParity = FLPROG_PORT_PARITY_ODD;\par
00136         {\cf19 return};\par
00137         {\cf19 break};\par
00138     {\cf19 case} 0x32:\par
00139         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00140         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00141         portParity = FLPROG_PORT_PARITY_ODD;\par
00142         {\cf19 return};\par
00143         {\cf19 break};\par
00144     {\cf19 case} 0x34:\par
00145         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00146         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00147         portParity = FLPROG_PORT_PARITY_ODD;\par
00148         {\cf19 return};\par
00149         {\cf19 break};\par
00150     {\cf19 case} 0x36:\par
00151         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00152         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00153         portParity = FLPROG_PORT_PARITY_ODD;\par
00154         {\cf19 return};\par
00155         {\cf19 break};\par
00156     {\cf19 case} 0x38:\par
00157         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00158         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00159         portParity = FLPROG_PORT_PARITY_ODD;\par
00160         {\cf19 return};\par
00161         {\cf19 break};\par
00162     {\cf19 case} 0x3A:\par
00163         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00164         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00165         portParity = FLPROG_PORT_PARITY_ODD;\par
00166         {\cf19 return};\par
00167         {\cf19 break};\par
00168     {\cf19 case} 0x3C:\par
00169         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00170         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00171         portParity = FLPROG_PORT_PARITY_ODD;\par
00172         {\cf19 return};\par
00173         {\cf19 break};\par
00174     {\cf19 case} 0x3E:\par
00175         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00176         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00177         portParity = FLPROG_PORT_PARITY_ODD;\par
00178         {\cf19 return};\par
00179         {\cf19 break};\par
00180     \}\par
00181     portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00182     portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00183     portParity = FLPROG_PORT_PARITY_NONE;\par
00184 \}\par
00185 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.h}
{\xe \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.h}
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartAVR.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.h}
{\xe \v src/uart/hardwareUart/hardwareUartAVR/hardwareUartAVR.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_AVR}\par
00006 \par
00007 {\cf17 class }FLProgUart : {\cf17 public} FLProgUartBasic\par
00008 \{\par
00009 {\cf17 public}:\par
00010     FLProgUart()\{\};\par
00011     FLProgUart(HardwareSerial *hardwarePort);\par
00012     {\cf17 virtual} {\cf18 void} begin();\par
00013     {\cf18 void} begin(int32_t speed, {\cf18 int} mode);\par
00014     {\cf17 virtual} {\cf18 bool} hasPort() \{ {\cf19 return} !(port == 0); \};\par
00015     {\cf17 virtual} {\cf18 void} restartPort();\par
00016 \par
00017 {\cf17 protected}:\par
00018     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} port; \};\par
00019     HardwareSerial *port;\par
00020     {\cf18 int} serialModeFromParametrs();\par
00021     {\cf18 void} setSerialMode(int16_t mode);\par
00022 \};\par
00023 \par
00024 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.cpp}
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "hardwareUartDUE.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartDUE.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.cpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "hardwareUartDUE.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_AVR_DUE}\par
00004 \par
00005 FLProgUart::FLProgUart(UARTClass *hardwarePort)\par
00006 \{\par
00007     port = hardwarePort;\par
00008 \}\par
00009 \par
00010 {\cf18 void} FLProgUart::restartPort()\par
00011 \{\par
00012     port->end();\par
00013     begin();\par
00014 \}\par
00015 \par
00016 {\cf18 void} FLProgUart::begin()\par
00017 \{\par
00018     port->begin(speedFromCode(), serialModeFromParametrs());\par
00019 \}\par
00020 \par
00021 {\cf18 void} FLProgUart::begin(int32_t speed, UARTClass::UARTModes mode)\par
00022 \{\par
00023     setCodeFromSpeed(speed);\par
00024     setSerialMode(mode);\par
00025     begin();\par
00026 \}\par
00027 \par
00028 UARTClass::UARTModes FLProgUart::serialModeFromParametrs()\par
00029 \{\par
00030     {\cf19 return} flprog::serialModeFromInt(serialCodeForParametrs());\par
00031 \}\par
00032 \par
00033 {\cf18 void} FLProgUart::setSerialMode(UARTClass::UARTModes mode)\par
00034 \{\par
00035     {\cf19 switch} (mode)\par
00036     \{\par
00037     {\cf19 case} SERIAL_8N1:\par
00038         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00039         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00040         portParity = FLPROG_PORT_PARITY_NONE;\par
00041         {\cf19 return};\par
00042         {\cf19 break};\par
00043     {\cf19 case} SERIAL_8E1:\par
00044         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00045         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00046         portParity = FLPROG_PORT_PARITY_EVEN;\par
00047         {\cf19 return};\par
00048         {\cf19 break};\par
00049     {\cf19 case} SERIAL_8O1:\par
00050         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00051         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00052         portParity = FLPROG_PORT_PARITY_ODD;\par
00053         {\cf19 return};\par
00054         {\cf19 break};\par
00055     \}\par
00056     portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00057     portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00058     portParity = FLPROG_PORT_PARITY_NONE;\par
00059 \}\par
00060 \par
00061 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h}
{\xe \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartDUE.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h}
{\xe \v src/uart/hardwareUart/hardwareUartDUE/hardwareUartDUE.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_AVR_DUE}\par
00006 {\cf17 class }FLProgUart : {\cf17 public} FLProgUartBasic\par
00007 \{\par
00008 {\cf17 public}:\par
00009     FLProgUart()\{\};\par
00010     FLProgUart(UARTClass *hardwarePort);\par
00011     {\cf17 virtual} {\cf18 void} begin();\par
00012     {\cf18 void} begin(int32_t speed, UARTClass::UARTModes mode);\par
00013     {\cf17 virtual} {\cf18 bool} hasPort() \{ {\cf19 return} !(port == 0); \};\par
00014     {\cf17 virtual} {\cf18 void} restartPort();\par
00015 \par
00016 {\cf17 protected}:\par
00017     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} port; \};\par
00018     UARTClass *port;\par
00019     UARTClass::UARTModes serialModeFromParametrs();\par
00020     {\cf18 void} setSerialMode(UARTClass::UARTModes mode);\par
00021 \};\par
00022 \par
00023 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.cpp}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "hardwareUartESP32.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartESP32.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "hardwareUartESP32.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00004 FLProgUart::FLProgUart(HardwareSerial *hardwarePort)\par
00005 \{\par
00006     port = hardwarePort;\par
00007 \}\par
00008 \par
00009 {\cf18 void} FLProgUart::restartPort()\par
00010 \{\par
00011     port->end();\par
00012     begin();\par
00013 \}\par
00014 \par
00015 {\cf18 void} FLProgUart::begin()\par
00016 \{\par
00017     port->begin(speedFromCode(), serialModeFromParametrs());\par
00018 \}\par
00019 \par
00020 {\cf18 void} FLProgUart::begin(int32_t speed, {\cf18 int} mode)\par
00021 \{\par
00022     setCodeFromSpeed(speed);\par
00023     setSerialMode(mode);\par
00024     begin();\par
00025 \}\par
00026 \par
00027 {\cf18 int} FLProgUart::serialModeFromParametrs()\par
00028 \{\par
00029     {\cf19 return} flprog::serialModeFromInt(serialCodeForParametrs());\par
00030 \}\par
00031 \par
00032 {\cf18 void} FLProgUart::setSerialMode(int16_t mode)\par
00033 \{\par
00034     {\cf19 switch} (mode)\par
00035     \{\par
00036     {\cf19 case} 0x00:\par
00037         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00038         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00039         portParity = FLPROG_PORT_PARITY_NONE;\par
00040         {\cf19 return};\par
00041         {\cf19 break};\par
00042     {\cf19 case} 0x02:\par
00043         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00044         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00045         portParity = FLPROG_PORT_PARITY_NONE;\par
00046         {\cf19 return};\par
00047         {\cf19 break};\par
00048     {\cf19 case} 0x04:\par
00049         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00050         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00051         portParity = FLPROG_PORT_PARITY_NONE;\par
00052         {\cf19 return};\par
00053         {\cf19 break};\par
00054     {\cf19 case} 0x06:\par
00055         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00056         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00057         portParity = FLPROG_PORT_PARITY_NONE;\par
00058         {\cf19 return};\par
00059         {\cf19 break};\par
00060     {\cf19 case} 0x08:\par
00061         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00062         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00063         portParity = FLPROG_PORT_PARITY_NONE;\par
00064         {\cf19 return};\par
00065         {\cf19 break};\par
00066     {\cf19 case} 0x0A:\par
00067         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00068         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00069         portParity = FLPROG_PORT_PARITY_NONE;\par
00070         {\cf19 return};\par
00071         {\cf19 break};\par
00072     {\cf19 case} 0x0C:\par
00073         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00074         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00075         portParity = FLPROG_PORT_PARITY_NONE;\par
00076         {\cf19 return};\par
00077         {\cf19 break};\par
00078     {\cf19 case} 0x0E:\par
00079         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00080         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00081         portParity = FLPROG_PORT_PARITY_NONE;\par
00082         {\cf19 return};\par
00083         {\cf19 break};\par
00084     {\cf19 case} 0x20:\par
00085         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00086         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00087         portParity = FLPROG_PORT_PARITY_EVEN;\par
00088         {\cf19 return};\par
00089         {\cf19 break};\par
00090     {\cf19 case} 0x22:\par
00091         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00092         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00093         portParity = FLPROG_PORT_PARITY_EVEN;\par
00094         {\cf19 return};\par
00095         {\cf19 break};\par
00096     {\cf19 case} 0x24:\par
00097         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00098         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00099         portParity = FLPROG_PORT_PARITY_EVEN;\par
00100         {\cf19 return};\par
00101         {\cf19 break};\par
00102     {\cf19 case} 0x26:\par
00103         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00104         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00105         portParity = FLPROG_PORT_PARITY_EVEN;\par
00106         {\cf19 return};\par
00107         {\cf19 break};\par
00108     {\cf19 case} 0x28:\par
00109         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00110         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00111         portParity = FLPROG_PORT_PARITY_EVEN;\par
00112         {\cf19 return};\par
00113         {\cf19 break};\par
00114     {\cf19 case} 0x2A:\par
00115         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00116         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00117         portParity = FLPROG_PORT_PARITY_EVEN;\par
00118         {\cf19 return};\par
00119         {\cf19 break};\par
00120     {\cf19 case} 0x2C:\par
00121         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00122         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00123         portParity = FLPROG_PORT_PARITY_EVEN;\par
00124         {\cf19 return};\par
00125         {\cf19 break};\par
00126     {\cf19 case} 0x2E:\par
00127         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00128         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00129         portParity = FLPROG_PORT_PARITY_EVEN;\par
00130         {\cf19 return};\par
00131         {\cf19 break};\par
00132     {\cf19 case} 0x30:\par
00133         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00134         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00135         portParity = FLPROG_PORT_PARITY_ODD;\par
00136         {\cf19 return};\par
00137         {\cf19 break};\par
00138     {\cf19 case} 0x32:\par
00139         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00140         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00141         portParity = FLPROG_PORT_PARITY_ODD;\par
00142         {\cf19 return};\par
00143         {\cf19 break};\par
00144     {\cf19 case} 0x34:\par
00145         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00146         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00147         portParity = FLPROG_PORT_PARITY_ODD;\par
00148         {\cf19 return};\par
00149         {\cf19 break};\par
00150     {\cf19 case} 0x36:\par
00151         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00152         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00153         portParity = FLPROG_PORT_PARITY_ODD;\par
00154         {\cf19 return};\par
00155         {\cf19 break};\par
00156     {\cf19 case} 0x38:\par
00157         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00158         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00159         portParity = FLPROG_PORT_PARITY_ODD;\par
00160         {\cf19 return};\par
00161         {\cf19 break};\par
00162     {\cf19 case} 0x3A:\par
00163         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00164         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00165         portParity = FLPROG_PORT_PARITY_ODD;\par
00166         {\cf19 return};\par
00167         {\cf19 break};\par
00168     {\cf19 case} 0x3C:\par
00169         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00170         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00171         portParity = FLPROG_PORT_PARITY_ODD;\par
00172         {\cf19 return};\par
00173         {\cf19 break};\par
00174     {\cf19 case} 0x3E:\par
00175         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00176         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00177         portParity = FLPROG_PORT_PARITY_ODD;\par
00178         {\cf19 return};\par
00179         {\cf19 break};\par
00180     \}\par
00181     portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00182     portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00183     portParity = FLPROG_PORT_PARITY_NONE;\par
00184 \}\par
00185 \par
00186 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.h}
{\xe \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.h}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartESP32.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.h}
{\xe \v src/uart/hardwareUart/hardwareUartESP32/hardwareUartESP32.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00006 \par
00007 {\cf17 class }FLProgUart : {\cf17 public} FLProgUartBasic\par
00008 \{\par
00009 {\cf17 public}:\par
00010     FLProgUart()\{\};\par
00011     FLProgUart(HardwareSerial *hardwarePort);\par
00012     {\cf17 virtual} {\cf18 void} begin();\par
00013     {\cf18 void} begin(int32_t speed, {\cf18 int} mode);\par
00014     {\cf17 virtual} {\cf18 bool} hasPort() \{ {\cf19 return} !(port == 0); \};\par
00015     {\cf17 virtual} {\cf18 void} restartPort();\par
00016 \par
00017 {\cf17 protected}:\par
00018     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} port; \};\par
00019     HardwareSerial *port;\par
00020     {\cf18 int} serialModeFromParametrs();\par
00021     {\cf18 void} setSerialMode(int16_t mode);\par
00022 \};\par
00023 \par
00024 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.cpp}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "hardwareUartESP8266.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartESP8266.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.cpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "hardwareUartESP8266.h"}\par
00002 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00003 FLProgUart::FLProgUart(HardwareSerial *hardwarePort)\par
00004 \{\par
00005     port = hardwarePort;\par
00006 \}\par
00007 \par
00008 {\cf18 void} FLProgUart::restartPort()\par
00009 \{\par
00010     port->end();\par
00011     begin();\par
00012 \}\par
00013 \par
00014 {\cf18 void} FLProgUart::begin()\par
00015 \{\par
00016     port->begin(speedFromCode(), serialModeFromParametrs());\par
00017 \}\par
00018 \par
00019 {\cf18 void} FLProgUart::begin(int32_t speed, SerialConfig mode)\par
00020 \{\par
00021     setCodeFromSpeed(speed);\par
00022     setSerialMode(mode);\par
00023     begin();\par
00024 \}\par
00025 \par
00026 SerialConfig FLProgUart::serialModeFromParametrs()\par
00027 \{\par
00028     {\cf19 return} flprog::serialModeFromInt(serialCodeForParametrs());\par
00029 \}\par
00030 \par
00031 {\cf18 void} FLProgUart::setSerialMode(SerialConfig mode)\par
00032 \{\par
00033     {\cf19 switch} (mode)\par
00034     \{\par
00035     {\cf19 case} SERIAL_5N1:\par
00036         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00037         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00038         portParity = FLPROG_PORT_PARITY_NONE;\par
00039         {\cf19 return};\par
00040         {\cf19 break};\par
00041     {\cf19 case} SERIAL_6N1:\par
00042         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00043         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00044         portParity = FLPROG_PORT_PARITY_NONE;\par
00045         {\cf19 return};\par
00046         {\cf19 break};\par
00047     {\cf19 case} SERIAL_7N1:\par
00048         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00049         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00050         portParity = FLPROG_PORT_PARITY_NONE;\par
00051         {\cf19 return};\par
00052         {\cf19 break};\par
00053     {\cf19 case} SERIAL_8N1:\par
00054         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00055         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00056         portParity = FLPROG_PORT_PARITY_NONE;\par
00057         {\cf19 return};\par
00058         {\cf19 break};\par
00059     {\cf19 case} SERIAL_5N2:\par
00060         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00061         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00062         portParity = FLPROG_PORT_PARITY_NONE;\par
00063         {\cf19 return};\par
00064         {\cf19 break};\par
00065     {\cf19 case} SERIAL_6N2:\par
00066         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00067         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00068         portParity = FLPROG_PORT_PARITY_NONE;\par
00069         {\cf19 return};\par
00070         {\cf19 break};\par
00071     {\cf19 case} SERIAL_7N2:\par
00072         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00073         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00074         portParity = FLPROG_PORT_PARITY_NONE;\par
00075         {\cf19 return};\par
00076         {\cf19 break};\par
00077     {\cf19 case} SERIAL_8N2:\par
00078         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00079         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00080         portParity = FLPROG_PORT_PARITY_NONE;\par
00081         {\cf19 return};\par
00082         {\cf19 break};\par
00083     {\cf19 case} SERIAL_5E1:\par
00084         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00085         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00086         portParity = FLPROG_PORT_PARITY_EVEN;\par
00087         {\cf19 return};\par
00088         {\cf19 break};\par
00089     {\cf19 case} SERIAL_6E1:\par
00090         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00091         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00092         portParity = FLPROG_PORT_PARITY_EVEN;\par
00093         {\cf19 return};\par
00094         {\cf19 break};\par
00095     {\cf19 case} SERIAL_7E1:\par
00096         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00097         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00098         portParity = FLPROG_PORT_PARITY_EVEN;\par
00099         {\cf19 return};\par
00100         {\cf19 break};\par
00101     {\cf19 case} SERIAL_8E1:\par
00102         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00103         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00104         portParity = FLPROG_PORT_PARITY_EVEN;\par
00105         {\cf19 return};\par
00106         {\cf19 break};\par
00107     {\cf19 case} SERIAL_5E2:\par
00108         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00109         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00110         portParity = FLPROG_PORT_PARITY_EVEN;\par
00111         {\cf19 return};\par
00112         {\cf19 break};\par
00113     {\cf19 case} SERIAL_6E2:\par
00114         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00115         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00116         portParity = FLPROG_PORT_PARITY_EVEN;\par
00117         {\cf19 return};\par
00118         {\cf19 break};\par
00119     {\cf19 case} SERIAL_7E2:\par
00120         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00121         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00122         portParity = FLPROG_PORT_PARITY_EVEN;\par
00123         {\cf19 return};\par
00124         {\cf19 break};\par
00125     {\cf19 case} SERIAL_8E2:\par
00126         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00127         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00128         portParity = FLPROG_PORT_PARITY_EVEN;\par
00129         {\cf19 return};\par
00130         {\cf19 break};\par
00131     {\cf19 case} SERIAL_5O1:\par
00132         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00133         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00134         portParity = FLPROG_PORT_PARITY_ODD;\par
00135         {\cf19 return};\par
00136         {\cf19 break};\par
00137     {\cf19 case} SERIAL_6O1:\par
00138         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00139         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00140         portParity = FLPROG_PORT_PARITY_ODD;\par
00141         {\cf19 return};\par
00142         {\cf19 break};\par
00143     {\cf19 case} SERIAL_7O1:\par
00144         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00145         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00146         portParity = FLPROG_PORT_PARITY_ODD;\par
00147         {\cf19 return};\par
00148         {\cf19 break};\par
00149     {\cf19 case} SERIAL_8O1:\par
00150         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00151         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00152         portParity = FLPROG_PORT_PARITY_ODD;\par
00153         {\cf19 return};\par
00154         {\cf19 break};\par
00155     {\cf19 case} SERIAL_5O2:\par
00156         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00157         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00158         portParity = FLPROG_PORT_PARITY_ODD;\par
00159         {\cf19 return};\par
00160         {\cf19 break};\par
00161     {\cf19 case} SERIAL_6O2:\par
00162         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00163         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00164         portParity = FLPROG_PORT_PARITY_ODD;\par
00165         {\cf19 return};\par
00166         {\cf19 break};\par
00167     {\cf19 case} SERIAL_7O2:\par
00168         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00169         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00170         portParity = FLPROG_PORT_PARITY_ODD;\par
00171         {\cf19 return};\par
00172         {\cf19 break};\par
00173     {\cf19 case} SERIAL_8O2:\par
00174         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00175         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00176         portParity = FLPROG_PORT_PARITY_ODD;\par
00177         {\cf19 return};\par
00178         {\cf19 break};\par
00179     \}\par
00180     portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00181     portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00182     portParity = FLPROG_PORT_PARITY_NONE;\par
00183 \}\par
00184 \par
00185 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.h}
{\xe \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.h}
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartESP8266.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.h}
{\xe \v src/uart/hardwareUart/hardwareUartESP8266/hardwareUartESP8266.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00006 \par
00007 {\cf17 class }FLProgUart : {\cf17 public} FLProgUartBasic\par
00008 \{\par
00009 {\cf17 public}:\par
00010     FLProgUart()\{\};\par
00011     FLProgUart(HardwareSerial *hardwarePort);\par
00012     {\cf17 virtual} {\cf18 void} begin();\par
00013 \par
00014     {\cf18 void} begin(int32_t speed, SerialConfig mode);\par
00015     {\cf17 virtual} {\cf18 bool} hasPort() \{ {\cf19 return} !(port == 0); \};\par
00016     {\cf17 virtual} {\cf18 void} restartPort();\par
00017 \par
00018 {\cf17 protected}:\par
00019     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} port; \};\par
00020     HardwareSerial *port;\par
00021     SerialConfig serialModeFromParametrs();\par
00022     {\cf18 void} setSerialMode(SerialConfig mode);\par
00023 \};\par
00024 \par
00025 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.cpp}
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "hardwareUartSTM.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartSTM.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.cpp}
{\xe \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.cpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "hardwareUartSTM.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_STM}\par
00004 Stream *FLProgUart::uartPort()\par
00005 \{\par
00006 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00007     {\cf19 if} (type == FLPROG_USB_UART)\par
00008     \{\par
00009         {\cf19 return} usbPort;\par
00010     \}\par
00011 {\cf21 #endif}\par
00012     {\cf19 return} port;\par
00013 \}\par
00014 \par
00015 FLProgUart::FLProgUart(HardwareSerial *hardwarePort)\par
00016 \{\par
00017     port = hardwarePort;\par
00018 \}\par
00019 \par
00020 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00021 FLProgUart::FLProgUart(USBSerial *port)\par
00022 \{\par
00023     usbPort = port;\par
00024     type = FLPROG_USB_UART;\par
00025 \}\par
00026 {\cf21 #endif}\par
00027 \par
00028 {\cf18 bool} FLProgUart::hasPort()\par
00029 \{\par
00030 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00031     {\cf19 if} (type == FLPROG_USB_UART)\par
00032     \{\par
00033         {\cf19 return} !(usbPort == 0);\par
00034     \}\par
00035 {\cf21 #endif}\par
00036     {\cf19 return} !(port == 0);\par
00037 \}\par
00038 \par
00039 {\cf18 void} FLProgUart::restartPort()\par
00040 \{\par
00041 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00042     {\cf19 if} (type == FLPROG_USB_UART)\par
00043     \{\par
00044         usbPort->end();\par
00045         begin();\par
00046         {\cf19 return};\par
00047     \}\par
00048 {\cf21 #endif}\par
00049     port->end();\par
00050     begin();\par
00051 \}\par
00052 \par
00053 {\cf18 void} FLProgUart::begin()\par
00054 \{\par
00055 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00056     {\cf19 if} (type == FLPROG_USB_UART)\par
00057     \{\par
00058         usbPort->begin(speedFromCode(), serialModeFromParametrs());\par
00059         {\cf19 return};\par
00060     \}\par
00061 {\cf21 #endif}\par
00062     port->begin(speedFromCode(), serialModeFromParametrs());\par
00063 \}\par
00064 \par
00065 {\cf18 void} FLProgUart::begin(int32_t speed, {\cf18 int} mode)\par
00066 \{\par
00067     setCodeFromSpeed(speed);\par
00068     setSerialMode(mode);\par
00069     begin();\par
00070 \}\par
00071 \par
00072 {\cf18 int} FLProgUart::serialModeFromParametrs()\par
00073 \{\par
00074     {\cf19 return} flprog::serialModeFromInt(serialCodeForParametrs());\par
00075 \}\par
00076 \par
00077 {\cf18 void} FLProgUart::setSerialMode(int16_t mode)\par
00078 \{\par
00079     {\cf19 switch} (mode)\par
00080     \{\par
00081     {\cf19 case} 0x00:\par
00082         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00083         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00084         portParity = FLPROG_PORT_PARITY_NONE;\par
00085         {\cf19 return};\par
00086         {\cf19 break};\par
00087     {\cf19 case} 0x02:\par
00088         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00089         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00090         portParity = FLPROG_PORT_PARITY_NONE;\par
00091         {\cf19 return};\par
00092         {\cf19 break};\par
00093     {\cf19 case} 0x04:\par
00094         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00095         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00096         portParity = FLPROG_PORT_PARITY_NONE;\par
00097         {\cf19 return};\par
00098         {\cf19 break};\par
00099     {\cf19 case} 0x06:\par
00100         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00101         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00102         portParity = FLPROG_PORT_PARITY_NONE;\par
00103         {\cf19 return};\par
00104         {\cf19 break};\par
00105     {\cf19 case} 0x08:\par
00106         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00107         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00108         portParity = FLPROG_PORT_PARITY_NONE;\par
00109         {\cf19 return};\par
00110         {\cf19 break};\par
00111     {\cf19 case} 0x0A:\par
00112         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00113         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00114         portParity = FLPROG_PORT_PARITY_NONE;\par
00115         {\cf19 return};\par
00116         {\cf19 break};\par
00117     {\cf19 case} 0x0C:\par
00118         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00119         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00120         portParity = FLPROG_PORT_PARITY_NONE;\par
00121         {\cf19 return};\par
00122         {\cf19 break};\par
00123     {\cf19 case} 0x0E:\par
00124         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00125         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00126         portParity = FLPROG_PORT_PARITY_NONE;\par
00127         {\cf19 return};\par
00128         {\cf19 break};\par
00129     {\cf19 case} 0x20:\par
00130         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00131         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00132         portParity = FLPROG_PORT_PARITY_EVEN;\par
00133         {\cf19 return};\par
00134         {\cf19 break};\par
00135     {\cf19 case} 0x22:\par
00136         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00137         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00138         portParity = FLPROG_PORT_PARITY_EVEN;\par
00139         {\cf19 return};\par
00140         {\cf19 break};\par
00141     {\cf19 case} 0x24:\par
00142         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00143         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00144         portParity = FLPROG_PORT_PARITY_EVEN;\par
00145         {\cf19 return};\par
00146         {\cf19 break};\par
00147     {\cf19 case} 0x26:\par
00148         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00149         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00150         portParity = FLPROG_PORT_PARITY_EVEN;\par
00151         {\cf19 return};\par
00152         {\cf19 break};\par
00153     {\cf19 case} 0x28:\par
00154         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00155         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00156         portParity = FLPROG_PORT_PARITY_EVEN;\par
00157         {\cf19 return};\par
00158         {\cf19 break};\par
00159     {\cf19 case} 0x2A:\par
00160         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00161         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00162         portParity = FLPROG_PORT_PARITY_EVEN;\par
00163         {\cf19 return};\par
00164         {\cf19 break};\par
00165     {\cf19 case} 0x2C:\par
00166         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00167         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00168         portParity = FLPROG_PORT_PARITY_EVEN;\par
00169         {\cf19 return};\par
00170         {\cf19 break};\par
00171     {\cf19 case} 0x2E:\par
00172         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00173         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00174         portParity = FLPROG_PORT_PARITY_EVEN;\par
00175         {\cf19 return};\par
00176         {\cf19 break};\par
00177     {\cf19 case} 0x30:\par
00178         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00179         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00180         portParity = FLPROG_PORT_PARITY_ODD;\par
00181         {\cf19 return};\par
00182         {\cf19 break};\par
00183     {\cf19 case} 0x32:\par
00184         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00185         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00186         portParity = FLPROG_PORT_PARITY_ODD;\par
00187         {\cf19 return};\par
00188         {\cf19 break};\par
00189     {\cf19 case} 0x34:\par
00190         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00191         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00192         portParity = FLPROG_PORT_PARITY_ODD;\par
00193         {\cf19 return};\par
00194         {\cf19 break};\par
00195     {\cf19 case} 0x36:\par
00196         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00197         portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00198         portParity = FLPROG_PORT_PARITY_ODD;\par
00199         {\cf19 return};\par
00200         {\cf19 break};\par
00201     {\cf19 case} 0x38:\par
00202         portDataBits = FLPROG_PORT_DATA_BITS_5;\par
00203         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00204         portParity = FLPROG_PORT_PARITY_ODD;\par
00205         {\cf19 return};\par
00206         {\cf19 break};\par
00207     {\cf19 case} 0x3A:\par
00208         portDataBits = FLPROG_PORT_DATA_BITS_6;\par
00209         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00210         portParity = FLPROG_PORT_PARITY_ODD;\par
00211         {\cf19 return};\par
00212         {\cf19 break};\par
00213     {\cf19 case} 0x3C:\par
00214         portDataBits = FLPROG_PORT_DATA_BITS_7;\par
00215         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00216         portParity = FLPROG_PORT_PARITY_ODD;\par
00217         {\cf19 return};\par
00218         {\cf19 break};\par
00219     {\cf19 case} 0x3E:\par
00220         portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00221         portStopBits = FLPROG_PORT_STOP_BITS_2;\par
00222         portParity = FLPROG_PORT_PARITY_ODD;\par
00223         {\cf19 return};\par
00224         {\cf19 break};\par
00225     \}\par
00226     portDataBits = FLPROG_PORT_DATA_BITS_8;\par
00227     portStopBits = FLPROG_PORT_STOP_BITS_1;\par
00228     portParity = FLPROG_PORT_PARITY_NONE;\par
00229 \}\par
00230 \par
00231 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.h}
{\xe \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.h}
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
hardwareUartSTM.h\par \pard\plain 
{\tc\tcl2 \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.h}
{\xe \v src/uart/hardwareUart/hardwareUartSTM/hardwareUartSTM.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_STM}\par
00006 \par
00007 {\cf17 class }FLProgUart : {\cf17 public} FLProgUartBasic\par
00008 \{\par
00009 {\cf17 public}:\par
00010     FLProgUart()\{\};\par
00011     FLProgUart(HardwareSerial *hardwarePort);\par
00012 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00013     FLProgUart(USBSerial *port);\par
00014 {\cf21 #endif}\par
00015     {\cf17 virtual} {\cf18 void} begin();\par
00016     {\cf18 void} begin(int32_t speed, {\cf18 int} mode);\par
00017     {\cf17 virtual} {\cf18 bool} hasPort();\par
00018     {\cf17 virtual} {\cf18 void} restartPort();\par
00019 \par
00020 {\cf17 protected}:\par
00021     {\cf17 virtual} Stream *uartPort();\par
00022     HardwareSerial *port;\par
00023 {\cf21 #ifdef FLPROG_STM32_USB_COM0}\par
00024     USBSerial *usbPort;\par
00025 {\cf21 #endif}\par
00026     {\cf18 byte} type = FLPROG_HARDWARE_UART;\par
00027     {\cf18 int} serialModeFromParametrs();\par
00028     {\cf18 void} setSerialMode(int16_t mode);\par
00029 \};\par
00030 \par
00031 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/softwareUart/flprogSoftwareUart.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/softwareUart/flprogSoftwareUart.cpp}
{\xe \v src/uart/softwareUart/flprogSoftwareUart.cpp}
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogSoftwareUart.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogSoftwareUart.cpp\par \pard\plain 
{\tc\tcl2 \v src/uart/softwareUart/flprogSoftwareUart.cpp}
{\xe \v src/uart/softwareUart/flprogSoftwareUart.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogSoftwareUart.h"}\par
00002 {\cf21 #ifdef FLPROG_CAN_USE_SOFTWARE_SERIAL}\par
00003 \par
00004 FLProgSoftwareUart::FLProgSoftwareUart({\cf18 byte} receivePin, {\cf18 byte} transmitPin)\par
00005 \{\par
00006     softwarePort = {\cf17 new} SoftwareSerial(receivePin, transmitPin);\par
00007 \}\par
00008 \par
00009 {\cf18 bool} FLProgSoftwareUart::hasPort()\par
00010 \{\par
00011     {\cf19 return} !(softwarePort == 0);\par
00012 \}\par
00013 \par
00014 {\cf18 void} FLProgSoftwareUart::restartPort()\par
00015 \{\par
00016     softwarePort->end();\par
00017     begin();\par
00018     {\cf19 return};\par
00019 \}\par
00020 \par
00021 {\cf18 void} FLProgSoftwareUart::begin()\par
00022 \{\par
00023     softwarePort->begin(speedFromCode());\par
00024     {\cf19 return};\par
00025 \}\par
00026 \par
00027 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/uart/softwareUart/flprogSoftwareUart.h\par \pard\plain 
{\tc\tcl2 \v src/uart/softwareUart/flprogSoftwareUart.h}
{\xe \v src/uart/softwareUart/flprogSoftwareUart.h}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogSoftwareUart.h\par \pard\plain 
{\tc\tcl2 \v src/uart/softwareUart/flprogSoftwareUart.h}
{\xe \v src/uart/softwareUart/flprogSoftwareUart.h}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "Arduino.h"}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CAN_USE_SOFTWARE_SERIAL}\par
00006 \par
00007 {\cf21 #include "SoftwareSerial.h"}\par
00008 \par
00009 {\cf17 class }FLProgSoftwareUart : {\cf17 public} FLProgUartBasic\par
00010 \{\par
00011 {\cf17 public}:\par
00012     FLProgSoftwareUart({\cf18 byte} receivePin, {\cf18 byte} transmitPin);\par
00013     {\cf17 virtual} {\cf18 void} restartPort();\par
00014     {\cf17 virtual} {\cf18 bool} hasPort();\par
00015     {\cf17 virtual} {\cf18 void} begin();\par
00016 \par
00017 {\cf17 protected}:\par
00018     SoftwareSerial *softwarePort;\par
00019     {\cf17 virtual} Stream *uartPort() \{ {\cf19 return} softwarePort; \};\par
00020 \};\par
00021 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/arduino/avr/flprogUtilitesAVR.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/avr/flprogUtilitesAVR.cpp}
{\xe \v src/variant/arduino/avr/flprogUtilitesAVR.cpp}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUtilitesAVR.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesAVR.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/avr/flprogUtilitesAVR.cpp}
{\xe \v src/variant/arduino/avr/flprogUtilitesAVR.cpp}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUtilitesAVR.h"}\par
00002 {\cf21 #ifdef FLPROG_UNIVTRSAL_FUNCTION}\par
00003 {\cf18 int} flprog::serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity)\par
00004 \{\par
00005     {\cf19 return} serialModeFromInt(serialCodeForParametrs(portDataBits, portStopBits, portParity));\par
00006 \}\par
00007 \par
00008 {\cf18 int} flprog::serialModeFromInt(int16_t code)\par
00009 \{\par
00010     {\cf19 switch} (code)\par
00011     \{\par
00012 {\cf21 #ifdef _STM32_DEF_}\par
00013 {\cf21 #ifdef UART_WORDLENGTH_7B}\par
00014     {\cf19 case} 0x04:\par
00015         {\cf19 return} SERIAL_7N1;\par
00016         {\cf19 break};\par
00017     {\cf19 case} 0x0C:\par
00018         {\cf19 return} SERIAL_7N2;\par
00019         {\cf19 break};\par
00020     {\cf19 case} 0x22:\par
00021         {\cf19 return} SERIAL_6E1;\par
00022         {\cf19 break};\par
00023     {\cf19 case} 0x2A:\par
00024         {\cf19 return} SERIAL_6E2;\par
00025         {\cf19 break};\par
00026     {\cf19 case} 0x32:\par
00027         {\cf19 return} SERIAL_6O1;\par
00028         {\cf19 break};\par
00029     {\cf19 case} 0x3A:\par
00030         {\cf19 return} SERIAL_6O2;\par
00031         {\cf19 break};\par
00032 {\cf21 #endif}\par
00033 {\cf21 #endif}\par
00034 \par
00035 {\cf21 #ifdef _STM8_DEF_}\par
00036 {\cf21 #ifdef UART_WORDLENGTH_7B}\par
00037     {\cf19 case} 0x04:\par
00038         {\cf19 return} SERIAL_7N1;\par
00039         {\cf19 break};\par
00040     {\cf19 case} 0x0C:\par
00041         {\cf19 return} SERIAL_7N2;\par
00042         {\cf19 break};\par
00043     {\cf19 case} 0x22:\par
00044         {\cf19 return} SERIAL_6E1;\par
00045         {\cf19 break};\par
00046     {\cf19 case} 0x2A:\par
00047         {\cf19 return} SERIAL_6E2;\par
00048         {\cf19 break};\par
00049     {\cf19 case} 0x32:\par
00050         {\cf19 return} SERIAL_6O1;\par
00051         {\cf19 break};\par
00052     {\cf19 case} 0x3A:\par
00053         {\cf19 return} SERIAL_6O2;\par
00054         {\cf19 break};\par
00055 {\cf21 #endif}\par
00056 {\cf21 #endif}\par
00057 \par
00058 {\cf21 #ifndef _STM32_DEF_}\par
00059 {\cf21 #ifndef _STM8_DEF_}\par
00060     {\cf19 case} 0x00:\par
00061         {\cf19 return} SERIAL_5N1;\par
00062         {\cf19 break};\par
00063     {\cf19 case} 0x02:\par
00064         {\cf19 return} SERIAL_6N1;\par
00065         {\cf19 break};\par
00066     {\cf19 case} 0x04:\par
00067         {\cf19 return} SERIAL_7N1;\par
00068         {\cf19 break};\par
00069     {\cf19 case} 0x08:\par
00070         {\cf19 return} SERIAL_5N2;\par
00071         {\cf19 break};\par
00072     {\cf19 case} 0x0A:\par
00073         {\cf19 return} SERIAL_6N2;\par
00074         {\cf19 break};\par
00075     {\cf19 case} 0x0C:\par
00076         {\cf19 return} SERIAL_7N2;\par
00077         {\cf19 break};\par
00078     {\cf19 case} 0x20:\par
00079         {\cf19 return} SERIAL_5E1;\par
00080         {\cf19 break};\par
00081     {\cf19 case} 0x22:\par
00082         {\cf19 return} SERIAL_6E1;\par
00083         {\cf19 break};\par
00084     {\cf19 case} 0x28:\par
00085         {\cf19 return} SERIAL_5E2;\par
00086         {\cf19 break};\par
00087     {\cf19 case} 0x2A:\par
00088         {\cf19 return} SERIAL_6E2;\par
00089         {\cf19 break};\par
00090     {\cf19 case} 0x30:\par
00091         {\cf19 return} SERIAL_5O1;\par
00092         {\cf19 break};\par
00093     {\cf19 case} 0x32:\par
00094         {\cf19 return} SERIAL_6O1;\par
00095         {\cf19 break};\par
00096     {\cf19 case} 0x38:\par
00097         {\cf19 return} SERIAL_5O2;\par
00098         {\cf19 break};\par
00099     {\cf19 case} 0x3A:\par
00100         {\cf19 return} SERIAL_6O2;\par
00101         {\cf19 break};\par
00102 {\cf21 #endif}\par
00103 {\cf21 #endif}\par
00104 \par
00105     {\cf19 case} 0x06:\par
00106         {\cf19 return} SERIAL_8N1;\par
00107         {\cf19 break};\par
00108     {\cf19 case} 0x0E:\par
00109         {\cf19 return} SERIAL_8N2;\par
00110         {\cf19 break};\par
00111     {\cf19 case} 0x24:\par
00112         {\cf19 return} SERIAL_7E1;\par
00113         {\cf19 break};\par
00114     {\cf19 case} 0x26:\par
00115         {\cf19 return} SERIAL_8E1;\par
00116         {\cf19 break};\par
00117     {\cf19 case} 0x2C:\par
00118         {\cf19 return} SERIAL_7E2;\par
00119         {\cf19 break};\par
00120     {\cf19 case} 0x2E:\par
00121         {\cf19 return} SERIAL_8E2;\par
00122         {\cf19 break};\par
00123     {\cf19 case} 0x34:\par
00124         {\cf19 return} SERIAL_7O1;\par
00125         {\cf19 break};\par
00126     {\cf19 case} 0x36:\par
00127         {\cf19 return} SERIAL_8O1;\par
00128         {\cf19 break};\par
00129     {\cf19 case} 0x3C:\par
00130         {\cf19 return} SERIAL_7O2;\par
00131         {\cf19 break};\par
00132     {\cf19 case} 0x3E:\par
00133         {\cf19 return} SERIAL_8O2;\par
00134         {\cf19 break};\par
00135     \}\par
00136     {\cf19 return} SERIAL_8N1;\par
00137 \}\par
00138 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/arduino/avr/flprogUtilitesAVR.h\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/avr/flprogUtilitesAVR.h}
{\xe \v src/variant/arduino/avr/flprogUtilitesAVR.h}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Arduino.h>}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesAVR.h\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/avr/flprogUtilitesAVR.h}
{\xe \v src/variant/arduino/avr/flprogUtilitesAVR.h}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include <Arduino.h>}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_UNIVTRSAL_FUNCTION}\par
00006 {\cf17 namespace }flprog\par
00007 \{\par
00008     {\cf18 int} serialModeFromInt(int16_t code);\par
00009     {\cf18 int} serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity);\par
00010 \};\par
00011 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/arduino/due/flprogUtilitesDUE.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/due/flprogUtilitesDUE.cpp}
{\xe \v src/variant/arduino/due/flprogUtilitesDUE.cpp}
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUtilitesDUE.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesDUE.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/due/flprogUtilitesDUE.cpp}
{\xe \v src/variant/arduino/due/flprogUtilitesDUE.cpp}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUtilitesDUE.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_AVR_DUE}\par
00004 \par
00005 UARTClass::UARTModes flprog::serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity)\par
00006 \{\par
00007     {\cf19 return} serialModeFromInt(serialCodeForParametrs(portDataBits, portStopBits, portParity));\par
00008 \}\par
00009 \par
00010 UARTClass::UARTModes flprog::serialModeFromInt(int16_t code)\par
00011 \{\par
00012     {\cf19 switch} (code)\par
00013     \{\par
00014     {\cf19 case} 0x06:\par
00015         {\cf19 return} SERIAL_8N1;\par
00016         {\cf19 break};\par
00017     {\cf19 case} 0x26:\par
00018         {\cf19 return} SERIAL_8E1;\par
00019         {\cf19 break};\par
00020     {\cf19 case} 0x36:\par
00021         {\cf19 return} SERIAL_8O1;\par
00022         {\cf19 break};\par
00023     \}\par
00024     {\cf19 return} SERIAL_8N1;\par
00025 \}\par
00026 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/arduino/due/flprogUtilitesDUE.h\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/due/flprogUtilitesDUE.h}
{\xe \v src/variant/arduino/due/flprogUtilitesDUE.h}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Arduino.h>}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesDUE.h\par \pard\plain 
{\tc\tcl2 \v src/variant/arduino/due/flprogUtilitesDUE.h}
{\xe \v src/variant/arduino/due/flprogUtilitesDUE.h}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include <Arduino.h>}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_AVR_DUE}\par
00006 \par
00007 {\cf17 namespace }flprog\par
00008 \{\par
00009   UARTClass::UARTModes serialModeFromInt(int16_t code);\par
00010   UARTClass::UARTModes serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity);\par
00011 \};\par
00012 \par
00013 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/esp32/flprogUtilitesESP32.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/esp32/flprogUtilitesESP32.cpp}
{\xe \v src/variant/esp32/flprogUtilitesESP32.cpp}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUtilitesESP32.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesESP32.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/esp32/flprogUtilitesESP32.cpp}
{\xe \v src/variant/esp32/flprogUtilitesESP32.cpp}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUtilitesESP32.h"}\par
00002 \par
00003 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00004 \par
00005 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/esp32/flprogUtilitesESP32.h\par \pard\plain 
{\tc\tcl2 \v src/variant/esp32/flprogUtilitesESP32.h}
{\xe \v src/variant/esp32/flprogUtilitesESP32.h}
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Arduino.h>}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesESP32.h\par \pard\plain 
{\tc\tcl2 \v src/variant/esp32/flprogUtilitesESP32.h}
{\xe \v src/variant/esp32/flprogUtilitesESP32.h}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include <Arduino.h>}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 {\cf21 #ifdef FLPROG_CORE_ESP32}\par
00005 \par
00006 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/esp8266/flprogUtilitesESP8266.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/esp8266/flprogUtilitesESP8266.cpp}
{\xe \v src/variant/esp8266/flprogUtilitesESP8266.cpp}
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "flprogUtilitesESP8266.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesESP8266.cpp\par \pard\plain 
{\tc\tcl2 \v src/variant/esp8266/flprogUtilitesESP8266.cpp}
{\xe \v src/variant/esp8266/flprogUtilitesESP8266.cpp}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "flprogUtilitesESP8266.h"}\par
00002 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00003 SerialConfig flprog::serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity)\par
00004 \{\par
00005     {\cf19 return} serialModeFromInt(serialCodeForParametrs(portDataBits, portStopBits, portParity));\par
00006 \}\par
00007 \par
00008 SerialConfig flprog::serialModeFromInt(int16_t code)\par
00009 \{\par
00010     {\cf19 switch} (code)\par
00011     \{\par
00012     {\cf19 case} 0x00:\par
00013         {\cf19 return} SERIAL_5N1;\par
00014         {\cf19 break};\par
00015     {\cf19 case} 0x02:\par
00016         {\cf19 return} SERIAL_6N1;\par
00017         {\cf19 break};\par
00018     {\cf19 case} 0x04:\par
00019         {\cf19 return} SERIAL_7N1;\par
00020         {\cf19 break};\par
00021     {\cf19 case} 0x06:\par
00022         {\cf19 return} SERIAL_8N1;\par
00023         {\cf19 break};\par
00024     {\cf19 case} 0x08:\par
00025         {\cf19 return} SERIAL_5N2;\par
00026         {\cf19 break};\par
00027     {\cf19 case} 0x0A:\par
00028         {\cf19 return} SERIAL_6N2;\par
00029         {\cf19 break};\par
00030     {\cf19 case} 0x0C:\par
00031         {\cf19 return} SERIAL_7N2;\par
00032         {\cf19 break};\par
00033     {\cf19 case} 0x0E:\par
00034         {\cf19 return} SERIAL_8N2;\par
00035         {\cf19 break};\par
00036     {\cf19 case} 0x20:\par
00037         {\cf19 return} SERIAL_5E1;\par
00038         {\cf19 break};\par
00039     {\cf19 case} 0x22:\par
00040         {\cf19 return} SERIAL_6E1;\par
00041         {\cf19 break};\par
00042     {\cf19 case} 0x24:\par
00043         {\cf19 return} SERIAL_7E1;\par
00044         {\cf19 break};\par
00045     {\cf19 case} 0x26:\par
00046         {\cf19 return} SERIAL_8E1;\par
00047         {\cf19 break};\par
00048     {\cf19 case} 0x28:\par
00049         {\cf19 return} SERIAL_5E2;\par
00050         {\cf19 break};\par
00051     {\cf19 case} 0x2A:\par
00052         {\cf19 return} SERIAL_6E2;\par
00053         {\cf19 break};\par
00054     {\cf19 case} 0x2C:\par
00055         {\cf19 return} SERIAL_7E2;\par
00056         {\cf19 break};\par
00057     {\cf19 case} 0x2E:\par
00058         {\cf19 return} SERIAL_8E2;\par
00059         {\cf19 break};\par
00060     {\cf19 case} 0x30:\par
00061         {\cf19 return} SERIAL_5O1;\par
00062         {\cf19 break};\par
00063     {\cf19 case} 0x32:\par
00064         {\cf19 return} SERIAL_6O1;\par
00065         {\cf19 break};\par
00066     {\cf19 case} 0x34:\par
00067         {\cf19 return} SERIAL_7O1;\par
00068         {\cf19 break};\par
00069     {\cf19 case} 0x36:\par
00070         {\cf19 return} SERIAL_8O1;\par
00071         {\cf19 break};\par
00072     {\cf19 case} 0x38:\par
00073         {\cf19 return} SERIAL_5O2;\par
00074         {\cf19 break};\par
00075     {\cf19 case} 0x3A:\par
00076         {\cf19 return} SERIAL_6O2;\par
00077         {\cf19 break};\par
00078     {\cf19 case} 0x3C:\par
00079         {\cf19 return} SERIAL_7O2;\par
00080         {\cf19 break};\par
00081     {\cf19 case} 0x3E:\par
00082         {\cf19 return} SERIAL_8O2;\par
00083         {\cf19 break};\par
00084     \}\par
00085     {\cf19 return} SERIAL_8N1;\par
00086 \}\par
00087 \par
00088 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB src/variant/esp8266/flprogUtilitesESP8266.h\par \pard\plain 
{\tc\tcl2 \v src/variant/esp8266/flprogUtilitesESP8266.h}
{\xe \v src/variant/esp8266/flprogUtilitesESP8266.h}
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Arduino.h>}\par
{\f2 #include "flprogUtilites.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
flprogUtilitesESP8266.h\par \pard\plain 
{\tc\tcl2 \v src/variant/esp8266/flprogUtilitesESP8266.h}
{\xe \v src/variant/esp8266/flprogUtilitesESP8266.h}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include <Arduino.h>}\par
00003 {\cf21 #include "flprogUtilites.h"}\par
00004 \par
00005 {\cf21 #ifdef FLPROG_CORE_ESP8266}\par
00006 \par
00007 {\cf17 namespace }flprog\par
00008 \{\par
00009     SerialConfig serialModeFromInt(int16_t code);\par
00010     SerialConfig serialModeFromParametrs({\cf18 byte} portDataBits, {\cf18 byte} portStopBits, {\cf18 byte} portParity);\par
00011 \};\par
00012 \par
00013 {\cf21 #endif}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC\par 
\pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
